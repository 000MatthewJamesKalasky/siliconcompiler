{
    "arg": {
        "index": {
            "defvalue": null,
            "example": [
                "cli: -arg_index 0",
                "api: chip.set('arg','index','0')"
            ],
            "help": "Dynamic parameter passed in by the sc runtime as an argument to a runtime task. The parameter enables configuration code (usually TCL) to use control flow that depend on the current 'index'. The parameter is used the run() fucntion and is not intended for external use.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Current sindex",
            "signature": null,
            "switch": "-arg_index <str>",
            "type": "str",
            "value": null
        },
        "step": {
            "defvalue": null,
            "example": [
                "cli: -arg_step 'route'",
                "api: chip.set('arg', 'step', 'route')"
            ],
            "help": "Dynamic parameter passed in by the sc runtime as an argument to a runtime task. The parameter enables configuration code (usually TCL) to use control flow that depend on the current 'step'. The parameter is used the run() fucntion and is not intended for external use.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Current step",
            "signature": null,
            "switch": "-arg_step <str>",
            "type": "str",
            "value": null
        }
    },
    "asic": {
        "aspectratio": {
            "defvalue": null,
            "example": [
                "cli: -asic_aspectratio 2.0",
                "api: chip.set('asic', 'aspectratio', '2.0')"
            ],
            "help": "Height to width ratio of the block for automated floor-planning. Values below 0.1 and above 10 should be avoided as they will likely fail to converge during placement and routing. The ideal aspect ratio for most designs is 1. This value is only used when no diearea or floorplan is supplied.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC block aspect ratio",
            "signature": null,
            "switch": "-asic_aspectratio <float>",
            "type": "float",
            "value": null
        },
        "corearea": {
            "defvalue": [],
            "example": [
                "cli: -asic_corearea '(0,0)'",
                "api: chip.set('asic', 'corearea', (0,0))"
            ],
            "help": "List of (x,y) points that define the outline of the core area for the physical design. Simple rectangle areas can be defined with two points, one for the lower left corner and one for the upper right corner. All values are specified in microns.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC core area outline",
            "signature": [],
            "switch": "-asic_corearea <[(float,float)]>",
            "type": "[(float,float)]",
            "value": []
        },
        "coremargin": {
            "defvalue": null,
            "example": [
                "cli: -asic_coremargin 1",
                "api: chip.set('asic', 'coremargin', '1')"
            ],
            "help": "Halo/margin between the die boundary and core placement for automated floorplanning when no diearea or floorplan is supplied. The value is specified in microns.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC block core margin",
            "signature": null,
            "switch": "-asic_coremargin <float>",
            "type": "float",
            "value": null
        },
        "delaymodel": {
            "defvalue": null,
            "example": [
                "cli: -asic_delaymodel ccs",
                "api: chip.set('asic', 'delaymodel', 'ccs')"
            ],
            "help": "Delay model to use for the target libs. Supported values are nldm and ccs.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC delay model",
            "signature": null,
            "switch": "-asic_delaymodel <str>",
            "type": "str",
            "value": null
        },
        "density": {
            "defvalue": null,
            "example": [
                "cli: -asic_density 30",
                "api: chip.set('asic', 'density', '30')"
            ],
            "help": "Target density based on the total design cell area reported after synthesis. This number is used when no diearea or floorplan is supplied. Any number between 1 and 100 is legal, but values above 50 may fail due to area/congestion issues during apr.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC target core density",
            "signature": null,
            "switch": "-asic_density <float>",
            "type": "float",
            "value": null
        },
        "diearea": {
            "defvalue": [],
            "example": [
                "cli: -asic_diearea '(0,0)'",
                "api: chip.set('asic', 'diearea', (0,0))"
            ],
            "help": "List of (x,y) points that define the outline of the die area for the physical design. Simple rectangle areas can be defined with two points, one for the lower left corner and one for the upper right corner. All values are specified in microns.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC die area outline",
            "signature": [],
            "switch": "-asic_diearea <[(float,float)]>",
            "type": "[(float,float)]",
            "value": []
        },
        "exclude": {
            "default": {
                "default": {
                    "defvalue": [],
                    "example": [
                        "cli: -asic_exclude drc 0 sram_macro",
                        "api: chip.set('asic','exclude','drc','0','sram_macro')"
                    ],
                    "help": "List of physical cells to exclude during execution. The process of exclusion is controlled by the flow step and tool setup. The list is commonly used by DRC tools and GDS export tools to direct the tool to exclude GDS information during GDS merge/export.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "ASIC excluded cells",
                    "signature": [],
                    "switch": "-asic_exclude 'step index <str>>",
                    "type": "[str]",
                    "value": []
                }
            }
        },
        "hpinlayer": {
            "defvalue": null,
            "example": [
                "cli: -asic_hpinlayer m4",
                "api: chip.set('asic', 'hpinlayer', 'm4')"
            ],
            "help": "Metal layer to use for automated horizontal pin placement during APR.  The metal layers can be specified as technology agnostic SC layers starting with m1 or as hard PDK specific layer names.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC vertical pin layer",
            "signature": null,
            "switch": "-asic_hpinlayer <str>",
            "type": "str",
            "value": null
        },
        "logiclib": {
            "defvalue": [],
            "example": [
                "cli: -asic_logiclib nangate45",
                "api: chip.set('asic', 'logiclib','nangate45')"
            ],
            "help": "List of all selected logic libraries libraries to use for optimization for a given library architecture (9T, 11T, etc).",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC logic libraries",
            "signature": [],
            "switch": "-asic_logiclib <str>",
            "type": "[str]",
            "value": []
        },
        "macrolib": {
            "defvalue": [],
            "example": [
                "cli: -asic_macrolib sram64x1024",
                "api: chip.set('asic', 'macrolib','sram64x1024')"
            ],
            "help": "List of macro libraries to be linked in during synthesis and place and route. Macro libraries are used for resolving instances but are not used as targets for logic synthesis.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC macro libraries",
            "signature": [],
            "switch": "-asic_macrolib <str>",
            "type": "[str]",
            "value": []
        },
        "maxcap": {
            "defvalue": null,
            "example": [
                "cli: -asic_maxcap '0.25e-12'",
                "api: chip.set('asic', 'maxcap', '0.25e-12')"
            ],
            "help": "Maximum allowed capacitance per net. The number is specified in Farads.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC maximum net capacitance",
            "signature": null,
            "switch": "-asic_maxcap <float>",
            "type": "float",
            "value": null
        },
        "maxfanout": {
            "defvalue": null,
            "example": [
                "cli: -asic_maxfanout 64",
                "api: chip.set('asic', 'maxfanout', '64')"
            ],
            "help": "Maximum driver fanout allowed during automated place and route. The parameter directs the APR tool to break up any net with fanout larger than maxfanout into sub nets and buffer.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC maximum fanout",
            "signature": null,
            "switch": "-asic_maxfanout <int>",
            "type": "int",
            "value": null
        },
        "maxlayer": {
            "defvalue": null,
            "example": [
                "cli: -asic_maxlayer m2",
                "api: chip.set('asic', 'maxlayer', 'm2')"
            ],
            "help": "Maximum SC metal layer name to be used for automated place and route . Alternatively the layer can be a string that matches a layer hard coded in the pdk_aprtech file. Designers wishing to use the same setup across multiple process nodes should use the integer approach. For processes with ambiguous starting routing layers, exact strings should be used.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC maximum routing layer",
            "signature": null,
            "switch": "-asic_maxlayer <str>",
            "type": "str",
            "value": null
        },
        "maxlength": {
            "defvalue": null,
            "example": [
                "cli: -asic_maxlength 1000",
                "api: chip.set('asic', 'maxlength', '1000')"
            ],
            "help": "Maximum total wire length allowed in design during APR. Any net that is longer than maxlength is broken up into segments by the tool.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC maximum wire length",
            "signature": null,
            "switch": "-asic_maxlength <float>",
            "type": "float",
            "value": null
        },
        "maxslew": {
            "defvalue": null,
            "example": [
                "cli: -asic_maxslew '0.25e-9'",
                "api: chip.set('asic', 'maxslew', '0.25e-9')"
            ],
            "help": "Maximum allowed transition time per net. The number is specified in seconds.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC maximum slew",
            "signature": null,
            "switch": "-asic_maxslew <float>",
            "type": "float",
            "value": null
        },
        "minlayer": {
            "defvalue": null,
            "example": [
                "cli: -asic_minlayer m2",
                "api: chip.set('asic', 'minlayer', 'm2')"
            ],
            "help": "Minimum SC metal layer name to be used for automated place and route . Alternatively the layer can be a string that matches a layer hard coded in the pdk_aprtech file. Designers wishing to use the same setup across multiple process nodes should use the integer approach. For processes with ambiguous starting routing layers, exact strings should be used.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC minimum routing layer",
            "signature": null,
            "switch": "-asic_minlayer <str>",
            "type": "str",
            "value": null
        },
        "ndr": {
            "default": {
                "defvalue": null,
                "example": [
                    "cli: -asic_ndr_width 'clk (0.2,0.2)",
                    "api: chip.set('asic','ndr','clk', (0.2,0.2))"
                ],
                "help": "Definitions of non-default routing rule specified on a per net basis. Constraints are entered as a (width,space) tuples specified in microns.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "ASIC non-default routing rule",
                "signature": null,
                "switch": "-asic_ndr 'netname <(float,float)>",
                "type": "(float,float)",
                "value": null
            }
        },
        "optlib": {
            "default": {
                "default": {
                    "defvalue": [],
                    "example": [
                        "cli: -asic_optlib 'place 0 asap7_lvt'",
                        "api: chip.set('asic','optlib','place','0','asap7_lvt')"
                    ],
                    "help": "List of logical libraries used during synthesis and place and route specified on a per step and per index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "ASIC optimization libraries",
                    "signature": [],
                    "switch": "-asic_optlib 'step index <str>'",
                    "type": "[str]",
                    "value": []
                }
            }
        },
        "rclayer": {
            "default": {
                "defvalue": null,
                "example": [
                    "cli: -asic_rclayer 'clk m3",
                    "api: chip.set('asic', 'rclayer', 'clk', 'm3')"
                ],
                "help": "Technology agnostic metal layer to be used for parasitic extraction estimation during APR for the wire type specified Current the supported wire types are: clk, data. The metal layers can be specified as technology agnostic SC layers starting with m1 or as hard PDK specific layer names.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "ASIC parasitics layer",
                "signature": null,
                "switch": "-asic_rclayer 'sigtype <str>'",
                "type": "str",
                "value": null
            }
        },
        "stackup": {
            "defvalue": null,
            "example": [
                "cli: -asic_stackup 2MA4MB2MC",
                "api: chip.set('asic','stackup','2MA4MB2MC')"
            ],
            "help": "Target stackup to use in the design. The stackup is required parameter for PDKs with multiple metal stackups.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "ASIC metal stackup",
            "signature": null,
            "switch": "-asic_stackup <str>",
            "type": "str",
            "value": null
        },
        "vpinlayer": {
            "defvalue": null,
            "example": [
                "cli: -asic_vpinlayer m3",
                "api: chip.set('asic', 'vpinlayer', 'm3')"
            ],
            "help": "Metal layer to use for automated vertical pin placement during APR.  The metal layers can be specified as technology agnostic SC layers starting with m1 or as hard PDK specific layer names.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "ASIC vertical pin layer",
            "signature": null,
            "switch": "-asic_vpinlayer <str>",
            "type": "str",
            "value": null
        }
    },
    "bkpt": {
        "defvalue": [],
        "example": [
            "cli: -bkpt place",
            "api: chip.set('bkpt','place')"
        ],
        "help": "List of step stop (break) points. If the step is a TCL based tool, then the breakpoints stops the flow inside the EDA tool. If the step is a command line tool, then the flow drops into a Python interpreter.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Breakpoint list",
        "signature": [],
        "switch": "-bkpt <str>",
        "type": "[str]",
        "value": []
    },
    "cfg": {
        "author": [],
        "copy": "false",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -cfg mypdk.json",
            "api: chip.set('cfg','mypdk.json')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "List of filepaths to JSON formatted schema configuration manifests. The files are read in automatically when using the 'sc' command line application. In Python programs, JSON manifests can be merged into the current working manifest using the read_manifest() method.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Configuration manifest",
        "signature": [],
        "switch": "-cfg <file>",
        "type": "[file]",
        "value": []
    },
    "checklist": {
        "default": {
            "default": {
                "criteria": {
                    "defvalue": [],
                    "example": [
                        "cli: -checklist_criteria 'ISO D000 errors==0'",
                        "api: chip.set('checklist','ISO','D000','criteria','errors==0')"
                    ],
                    "help": "Simple list of signoff criteria for {group} checklist item which must all be met for signoff. Each signoff criteria consists of a metric, a relational operator, and a value in the form. 'metric op value'.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item criteria",
                    "signature": [],
                    "switch": "-checklist_criteria 'standard item <float>'",
                    "type": "[str]",
                    "value": []
                },
                "description": {
                    "defvalue": null,
                    "example": [
                        "cli: -checklist_description 'ISO D000 A-DESCRIPTION'",
                        "api: chip.set('checklist','ISO','D000','description','A-DESCRIPTION')"
                    ],
                    "help": "A short one line description of the {group} checklist item.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item description",
                    "signature": null,
                    "switch": "-checklist_description 'standard item <str>",
                    "type": "str",
                    "value": null
                },
                "index": {
                    "defvalue": "0",
                    "example": [
                        "cli: -checklist_index 'ISO D000 1'",
                        "api: chip.set('checklist','ISO','D000','index','1')"
                    ],
                    "help": "Flowgraph index used to verify the {group} checklist item. The parameter should be left empty for manual checks and for tool flows that bypass the SC infrastructure.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item index",
                    "signature": null,
                    "switch": "-checklist_index 'standard item <str>'",
                    "type": "str",
                    "value": "0"
                },
                "ok": {
                    "defvalue": "false",
                    "example": [
                        "cli: -checklist_ok 'ISO D000 true'",
                        "api: chip.set('checklist','ISO','D000','ok', True)"
                    ],
                    "help": "Boolean check mark for the {group} checklist item. A value of True indicates a human has inspected the all item dictionary parameters check out.",
                    "lock": "false",
                    "require": "all",
                    "scope": "global",
                    "shorthelp": "Checklist item ok",
                    "signature": null,
                    "switch": "-checklist_ok 'standard item <str>'",
                    "type": "bool",
                    "value": "false"
                },
                "rationale": {
                    "defvalue": [],
                    "example": [
                        "cli: -checklist_rational 'ISO D000 reliability'",
                        "api: chip.set('checklist','ISO','D000','rationale','reliability')"
                    ],
                    "help": "Rationale for the the {group} checklist item. Rationale should be a unique alphanumeric code used by the standard or a short one line or single word description.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item rational",
                    "signature": [],
                    "switch": "-checklist_rationale 'standard item <str>",
                    "type": "[str]",
                    "value": []
                },
                "report": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -checklist_report 'ISO D000 bold my.rpt'",
                            "api: chip.set('checklist','ISO','D000','report','hold', 'my.rpt')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepath to report(s) of specified type documenting the successful validation of the {group} checklist item. Specified on a per metric basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Checklist item metric report",
                        "signature": [],
                        "switch": "-checklist_report 'standard item metric <file>'",
                        "type": "[file]",
                        "value": []
                    }
                },
                "requirement": {
                    "defvalue": null,
                    "example": [
                        "cli: -checklist_requirement 'ISO D000 DOCSTRING'",
                        "api: chip.set('checklist','ISO','D000','requirement','DOCSTRING')"
                    ],
                    "help": "A complete requirement description of the {group} checklist item entered as a multi-line string.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item requirement",
                    "signature": null,
                    "switch": "-checklist_requirement 'standard item <str>",
                    "type": "str",
                    "value": null
                },
                "step": {
                    "defvalue": null,
                    "example": [
                        "cli: -checklist_step 'ISO D000 place'",
                        "api: chip.set('checklist','ISO','D000','step','place')"
                    ],
                    "help": "Flowgraph step used to verify the {group} checklist item. The parameter should be left empty for manual and for tool flows that bypass the SC infrastructure.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item step",
                    "signature": null,
                    "switch": "-checklist_step 'standard item <str>'",
                    "type": "str",
                    "value": null
                },
                "waiver": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -checklist_waiver 'ISO D000 bold my.txt'",
                            "api: chip.set('checklist','ISO','D000','waiver','hold', 'my.txt')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepath to report(s) documenting waivers for the {group} checklist item specified on a per metric basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Checklist item metric waivers",
                        "signature": [],
                        "switch": "-checklist_waiver 'standard item metric <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        }
    },
    "clean": {
        "defvalue": "false",
        "example": [
            "cli: -clean",
            "api: chip.set('clean', True)"
        ],
        "help": "Clean up all intermediate and non essential files at the end of a task, leaving only the log file and 'report' and 'output' parameters associated with the task tool.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Clean up after run",
        "signature": null,
        "switch": "-clean <bool>",
        "type": "bool",
        "value": "false"
    },
    "clock": {
        "default": {
            "jitter": {
                "defvalue": null,
                "example": [
                    "cli: -clock_jitter 'clk 0.01'",
                    "api: chip.set('clock','clk','jitter','0.01')"
                ],
                "help": "Specifies the jitter for a clock source in nanoseconds.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Clock jitter",
                "signature": null,
                "switch": "-clock_jitter 'clkname <float>",
                "type": "float",
                "value": null
            },
            "period": {
                "defvalue": null,
                "example": [
                    "cli: -clock_period 'clk 10'",
                    "api: chip.set('clock','clk','period','10')"
                ],
                "help": "Specifies the period for a clock source in nanoseconds.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Clock period",
                "signature": null,
                "switch": "-clock_period 'clkname <float>",
                "type": "float",
                "value": null
            },
            "pin": {
                "defvalue": null,
                "example": [
                    "cli: -clock_pin 'clk top.pll.clkout'",
                    "api: chip.set('clock', 'clk','pin','top.pll.clkout')"
                ],
                "help": "Defines a clock name alias to assign to a clock source.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Clock driver pin",
                "signature": null,
                "switch": "-clock_pin 'clkname <str>'",
                "type": "str",
                "value": null
            }
        }
    },
    "cmdfile": {
        "author": [],
        "copy": "false",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -f design.f",
            "api: chip.set('cmdfile','design.f')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "Read the specified file, and act as if all text inside it was specified as command line parameters. Supported by most verilog simulators including Icarus and Verilator. The format of the file is not strongly standardized. Support for comments and environment variables within the file varies and depends on the tool used. SC simply passes on the filepath toe the tool executable.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design compilation command file",
        "signature": [],
        "switch": "-f <file>",
        "type": "[file]",
        "value": []
    },
    "constraint": {
        "author": [],
        "copy": "true",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -constraint top.sdc",
            "api: chip.set('constraint','top.sdc')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "List of global constraints for the design to use during compilation. Types of constraints include timing (SDC) and pin mappings files (PCF) for FPGAs. More than one file can be supplied. Timing constraints are global and sourced in all MCMM scenarios.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design constraints files",
        "signature": [],
        "switch": "-constraint <file>",
        "type": "[file]",
        "value": []
    },
    "copyall": {
        "defvalue": "false",
        "example": [
            "cli: -copyall",
            "api: chip.set('copyall', 'true')"
        ],
        "help": "Specifies that all used files should be copied into the build directory, overriding the per schema entry copy settings.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Copy all inputs to build directory",
        "signature": null,
        "switch": "-copyall <bool>",
        "type": "bool",
        "value": "false"
    },
    "credentials": {
        "author": [],
        "copy": "false",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -credentials /home/user/.sc/credentials",
            "api: chip.set('credentials','/home/user/.sc/credentials')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "Filepath to credentials used for remote processing. If the credentials parameter is empty, the remote processing client program tries to access the \".sc/credentials\" file in the user's home directory. The file supports the following fields: userid=<user id> secret_key=<secret key used for authentication> server=<ipaddr or url>",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "User credentials file",
        "signature": [],
        "switch": "-credentials <file>'",
        "type": "[file]",
        "value": []
    },
    "define": {
        "defvalue": [],
        "example": [
            "cli: -DCFG_ASIC=1",
            "api: chip.set('define','CFG_ASIC=1')"
        ],
        "help": "Symbol definition for source preprocessor.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design pre-processor symbol",
        "signature": [],
        "switch": "-D<str>",
        "type": "[str]",
        "value": []
    },
    "design": {
        "defvalue": null,
        "example": [
            "cli: -design hello_world",
            "api: chip.set('design', 'hello_world')"
        ],
        "help": "Name of the top level module to compile. Required for all designs with more than one module.",
        "lock": "false",
        "require": "all",
        "scope": "global",
        "shorthelp": "Design top module name",
        "signature": null,
        "switch": "-design <str>",
        "type": "str",
        "value": null
    },
    "dir": {
        "defvalue": "build",
        "example": [
            "cli: -dir ./build_the_future",
            "api: chip.set('dir','./build_the_future')"
        ],
        "help": "The default build directory is in the local './build' where SC was executed. The 'dir' parameters can be used to set an alternate compilation directory path.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Build directory",
        "signature": null,
        "switch": "-dir <dir>",
        "type": "dir",
        "value": "build"
    },
    "eda": {
        "default": {
            "continue": {
                "defvalue": "false",
                "example": [
                    "cli: -eda_continue 'verilator true'",
                    "api: chip.set('eda','verilator','continue', true)"
                ],
                "help": "Directs tool to continue operating even if errors are encountered.",
                "lock": "false",
                "require": "all",
                "scope": "global",
                "shorthelp": "Tool continue-on-error option",
                "signature": null,
                "switch": "-eda_continue 'tool <bool>'",
                "type": "bool",
                "value": "false"
            },
            "copy": {
                "defvalue": "false",
                "example": [
                    "cli: -eda_copy 'openroad true'",
                    "api: chip.set('eda','openroad','copy',true)"
                ],
                "help": "Specifies that the reference script directory should be copied and run from the local run directory.",
                "lock": "false",
                "require": "all",
                "scope": "global",
                "shorthelp": "Tool copy option",
                "signature": null,
                "switch": "-eda_copy 'tool <bool>'",
                "type": "bool",
                "value": "false"
            },
            "env": {
                "default": {
                    "default": {
                        "default": {
                            "defvalue": [],
                            "example": [
                                "cli: -eda_env 'openroad cts 0 MYVAR 42'",
                                "api: chip.set('eda','openroad','env','cts','0','MYVAR','42')"
                            ],
                            "help": "Environment variables to set for individual tasks. Keys and values should be set in accordance with the tool's documentation. Most tools do not require extra environment variables to function.",
                            "lock": "false",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Tool environment variables",
                            "signature": [],
                            "switch": "-eda_env 'tool step index name <str>'",
                            "type": "[str]",
                            "value": []
                        }
                    }
                }
            },
            "exe": {
                "defvalue": null,
                "example": [
                    "cli: -eda_exe 'openroad openroad'",
                    "api:  chip.set('eda','openroad','exe','openroad')"
                ],
                "help": "Tool executable name.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Tool executable name",
                "signature": null,
                "switch": "-eda_exe 'tool<str>'",
                "type": "str",
                "value": null
            },
            "format": {
                "defvalue": null,
                "example": [
                    "cli: -eda_format 'yosys tcl'",
                    "api: chip.set('eda','yosys','format','tcl')"
                ],
                "help": "File format for tool manifest handoff. Supported formats are tcl, yaml, and json.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Tool manifest file format",
                "signature": null,
                "switch": "-eda_format 'tool <file>'",
                "type": "str",
                "value": null
            },
            "input": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -eda_input 'openroad place 0 oh_add.def'",
                            "api: chip.set('eda','openroad','input','place','0','oh_add.def')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "List of data files to be copied from previous flowgraph steps 'output' directory. The list of steps to copy files from is defined by the list defined by the dictionary key ['flowgraph', step, index, 'input']. All files must be available for flow to continue. If a file is missing, the program exists on an error.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Tool input files",
                        "signature": [],
                        "switch": "-eda_input 'tool step index <str>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "licenseserver": {
                "default": {
                    "defvalue": [],
                    "example": [
                        "cli: -eda_licenseserver 'atool ACME_LICENSE 1700@server'",
                        "api: chip.set('eda','atool','licenseserver','ACME_LICENSE','1700@server')"
                    ],
                    "help": "Defines a set of tool specific environment variables used by the executables that depend on license key servers to control access. For multiple servers, separate each server by a 'colon'. The named license variable are read at runtime (run()) and the environment variables are set.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Tool license servers",
                    "signature": [],
                    "switch": "-eda_licenseserver 'tool name <str>'",
                    "type": "[str]",
                    "value": []
                }
            },
            "option": {
                "default": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -eda_option 'openroad cts 0 -no_init'",
                            "api: chip.set('eda','openroad','option','cts','0','-no_init')"
                        ],
                        "help": "List of command line options for the tool executable, specified on a per tool and per step basis. Options must not include spaces. For multiple argument options, each option is a separate list element.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool executable options",
                        "signature": [],
                        "switch": "-eda_option 'tool step index name <str>'",
                        "type": "[str]",
                        "value": []
                    }
                }
            },
            "output": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -eda_output 'openroad place 0 oh_add.def'",
                            "api: chip.set('eda','openroad','output','place','0','oh_add.def')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "List of data files to be copied from previous flowgraph steps 'output' directory. The list of steps to copy files from is defined by the list defined by the dictionary key ['flowgraph', step, index, 'output']. All files must be available for flow to continue. If a file is missing, the program exists on an error.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Tool output files",
                        "signature": [],
                        "switch": "-eda_output 'tool step index <str>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "path": {
                "defvalue": null,
                "example": [
                    "cli: -eda_path 'openroad /usr/local/bin'",
                    "api:  chip.set('eda','openroad','path','/usr/local/bin')"
                ],
                "help": "File system path to tool executable. The path is pre pended to the 'exe' parameter for batch runs and output as an environment variable for interactive setup. The path parameter can be left blank if the 'exe' is already in the environment search path. Tool executable name.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Tool executable path",
                "signature": null,
                "switch": "-eda_path 'tool <dir>'",
                "type": "dir",
                "value": null
            },
            "postscript": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -eda_postscript 'yosys syn 0 post.tcl'",
                            "api: chip.set('eda','yosys','postscript','syn','0','post.tcl')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Path to a user supplied script to be executed after all built in tasks (except for data export) have completed.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Tool post-step script",
                        "signature": [],
                        "switch": "-eda_postscript 'tool step index <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "prescript": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -eda_prescript 'yosys syn 0 pre.tcl'",
                            "api: chip.set('eda','yosys','prescript','syn','0','pre.tcl')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Path to a user supplied script to execute after reading in the design but before the main execution stage of the step. Exact entry point depends on the step and main script being executed. An example of a prescript entry point would be immediately before global placement.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Tool pre-step script",
                        "signature": [],
                        "switch": "-eda_prescript 'tool step index <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "refdir": {
                "default": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -eda_refdir 'yosys syn 0 ./myref'",
                            "api:  chip.set('eda','yosys','refdir','syn','0','./myref')"
                        ],
                        "help": "Path to directories containing reference flow scripts, specified on a per step and index basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Tool script directory",
                        "signature": [],
                        "switch": "-eda_refdir 'tool step index <dir>'",
                        "type": "[dir]",
                        "value": []
                    }
                }
            },
            "regex": {
                "default": {
                    "default": {
                        "default": {
                            "defvalue": [],
                            "example": [
                                "cli: -eda_regex 'openroad place 0 error -v ERROR",
                                "api: chip.set('eda','openroad','regex','place','0','error','-v ERROR')"
                            ],
                            "help": "A list of piped together grep commands. Each entry represents a set of command line arguments for grep including the regex pattern to match. Starting with the first list entry, each grep output is piped into the following grep command in the list. Supported grep options include, -t, -i, -E, -x, -e. Patterns starting with \"-\" should be directly preceeded by the \"-e\" option. The following example illustrates the concept. UNIX grep: >> grep WARNING place.log | grep -v \"bbox\" > place.warnings siliconcompiler: chip.set('eda','openroad','regex','place',0','warnings',[\"WARNING\",\"-v bbox\"]) Defines a set of tool specific environment variables used by the executables that depend on license key servers to control access. For multiple servers, separate each server by a 'colon'. The named license variable are read at runtime (run()) and the environment variables are set.",
                            "lock": "false",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Tool regex filter",
                            "signature": [],
                            "switch": "-eda_regex 'tool step index suffix <str>'",
                            "type": "[str]",
                            "value": []
                        }
                    }
                }
            },
            "report": {
                "default": {
                    "default": {
                        "default": {
                            "author": [],
                            "copy": "false",
                            "date": [],
                            "defvalue": [],
                            "example": [
                                "cli: -eda_report 'openroad place 0 holdtns place.log'",
                                "api: chip.set('eda','openroad','report','syn','0','holdtns','place.log')"
                            ],
                            "filehash": [],
                            "hashalgo": "sha256",
                            "help": "List of report files associated with a specific 'metric'. The file path specified is relative to the run directory of the current task.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Tool report files",
                            "signature": [],
                            "switch": "-eda_report 'tool step index metric <str>'",
                            "type": "[file]",
                            "value": []
                        }
                    }
                }
            },
            "require": {
                "default": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -eda_require 'openroad cts 0 design'",
                            "api: chip.set('eda','openroad','require','cts','0','design')"
                        ],
                        "help": "List of keypaths to required tool parameters. The list is used by check() to verify that all parameters have been set up before step execution begins.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Tool parameter requirements",
                        "signature": [],
                        "switch": "-eda_require 'tool step index <str>'",
                        "type": "[str]",
                        "value": []
                    }
                }
            },
            "script": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -eda_script 'yosys syn 0 syn.tcl'",
                            "api: chip.set('eda','yosys','script','syn','0','syn.tcl')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Path to the entry script called by the executable specified on a per tool and per step basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Tool entry script",
                        "signature": [],
                        "switch": "-eda_script 'tool step index <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "threads": {
                "default": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -eda_threads 'magic drc 0 64'",
                            "api: chip.set('eda','magic','threads','drc','0','64')"
                        ],
                        "help": "Thread parallelism to use for execution specified on a per tool and per step basis. If not specified, SC queries the operating system and sets the threads based on the maximum thread count supported by the hardware.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool thread parallelism",
                        "signature": null,
                        "switch": "-eda_threads 'tool step index <int>'",
                        "type": "int",
                        "value": null
                    }
                }
            },
            "variable": {
                "default": {
                    "default": {
                        "default": {
                            "defvalue": [],
                            "example": [
                                "cli: -eda_variable 'openroad cts 0 myvar 42'",
                                "api: chip.set('eda','openroad','variable','cts','0','myvar','42')"
                            ],
                            "help": "Tool script variables specified as key value pairs. Variable names and value types must match the name and type of tool and reference script consuming the variable.",
                            "lock": "false",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Tool script variables",
                            "signature": [],
                            "switch": "-eda_variable 'tool step index name <str>'",
                            "type": "[str]",
                            "value": []
                        }
                    }
                }
            },
            "vendor": {
                "defvalue": null,
                "example": [
                    "cli: -eda_vendor 'yosys yosys'",
                    "api: chip.set('eda','yosys','vendor','yosys')"
                ],
                "help": "Name of the tool vendor. Parameter can be used to set vendor specific technology variables in the PDK and libraries. For open source projects, the project name should be used in place of vendor.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Tool vendor",
                "signature": null,
                "switch": "-eda_vendor 'tool <str>'",
                "type": "str",
                "value": null
            },
            "version": {
                "defvalue": [],
                "example": [
                    "cli: -eda_version 'openroad 2.0'",
                    "api:  chip.set('eda','openroad','version','2.0')"
                ],
                "help": "List of acceptable versions of the tool executable to be used. During task execution, the the tool is called with the 'vswitch' to check the runtime executable version. When the 'vercheck' is set to True, of the 'version' fails to match the system executable, then the job is halted pre-execution.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Tool version number",
                "signature": [],
                "switch": "-eda_version 'tool <str>'",
                "type": "[str]",
                "value": []
            },
            "vswitch": {
                "defvalue": [],
                "example": [
                    "cli: -eda_vswitch 'openroad -version'",
                    "api:  chip.set('eda','openroad','vswitch','-version')"
                ],
                "help": "Command line switch to use with executable used to print out the version number. Common switches include -v, -version, --version. Some tools may require extra flags to run in batch mode.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Tool executable version switch",
                "signature": [],
                "switch": "-eda_vswitch 'tool <str>'",
                "type": "[str]",
                "value": []
            },
            "warningoff": {
                "defvalue": [],
                "example": [
                    "cli: -eda_warningoff 'verilator COMBDLY'",
                    "api: chip.set('eda','verilator','warningoff','COMBDLY')"
                ],
                "help": "A list of EDA warnings for which printing should be suppressed. Generally this is done on a per design basis after review has determined that warning can be safely ignored The code for turning off warnings can be found in the specific tool reference manual.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Tool warning filter",
                "signature": [],
                "switch": "-eda_warningoff 'tool <str>'",
                "type": "[str]",
                "value": []
            }
        }
    },
    "env": {
        "default": {
            "defvalue": null,
            "example": [
                "cli: -env 'PDK_HOME /disk/mypdk'",
                "api: chip.set('env', 'PDK_HOME', '/disk/mypdk')"
            ],
            "help": "Certain tools and reference flows require global environment variables to be set. These variables can be managed externally or specified through the env variable.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "Environment variables",
            "signature": null,
            "switch": "-env 'key <str>",
            "type": "str",
            "value": null
        }
    },
    "flow": {
        "defvalue": null,
        "example": [
            "cli: -flow asicfow",
            "api: chip.set('flow','asicflow')"
        ],
        "help": "Sets the flow for the current run. The flow name must match up with an 'flow' in the flowgraph",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Compilation flow",
        "signature": null,
        "switch": "-flow <str>",
        "type": "str",
        "value": null
    },
    "flowarg": {
        "default": {
            "defvalue": [],
            "example": [
                "cli: -flowarg 'n 100",
                "api: chip.set('flowarg','n', 100)"
            ],
            "help": "Parameter passed in as key/value pair to the flow target referenced in the load_flow() API call. See the target flow for specific guidelines regarding configuration parameters.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "Target flow argument",
            "signature": [],
            "switch": "-flowarg 'arg <str>",
            "type": "[str]",
            "value": []
        }
    },
    "flowgraph": {
        "default": {
            "default": {
                "default": {
                    "args": {
                        "defvalue": [],
                        "example": [
                            "cli: -flowgraph_args 'asicflow cts 0 0'",
                            "api:  chip.add('flowgraph','asicflow','cts','0','args','0')"
                        ],
                        "help": "User specified flowgraph string arguments specified on a per step and per index basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Flowgraph setup arguments",
                        "signature": [],
                        "switch": "-flowgraph_args 'flow step index <str>'",
                        "type": "[str]",
                        "value": []
                    },
                    "input": {
                        "defvalue": [],
                        "example": [
                            "cli: -flowgraph_input 'asicflow cts 0 (place,0)'",
                            "api:  chip.set('flowgraph','asicflow','cts','0','input',('place','0'))"
                        ],
                        "help": "A list of inputs for the current step and index, specified as a (step,index) tuple.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Flowgraph step input",
                        "signature": [],
                        "switch": "-flowgraph_input 'flow step index <(str,str)>'",
                        "type": "[(str,str)]",
                        "value": []
                    },
                    "timeout": {
                        "defvalue": null,
                        "example": [
                            "cli: -flowgraph_timeout 'asicflow cts 0 3600'",
                            "api:  chip.set('flowgraph','asicflow','cts','0','timeout', 3600)"
                        ],
                        "help": "Timeout value in seconds specified on a per step and per index basis. The flowgraph timeout value is compared against the wall time tracked by the SC runtime to determine if an operation should continue. Timeout values help in situations where 1.) an operation is stuck and may never finish. 2.) the operation progress has saturated and continued execution has a negative return on investment.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Flowgraph task timeout value",
                        "signature": null,
                        "switch": "-flowgraph_timeout 'flow step 0 <float>'",
                        "type": "float",
                        "value": null
                    },
                    "tool": {
                        "defvalue": null,
                        "example": [
                            "cli: -flowgraph_tool 'asicflow place openroad'",
                            "api: chip.set('flowgraph','asicflow','place','0','tool','openroad')"
                        ],
                        "help": "Name of the tool name used for task execution. Builtin tool names associated bound to core API functions include: minimum, maximum, join, verify, mux.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Flowgraph tool selection",
                        "signature": null,
                        "switch": "-flowgraph_tool 'flow step <str>'",
                        "type": "str",
                        "value": null
                    },
                    "valid": {
                        "defvalue": "false",
                        "example": [
                            "cli: -flowgraph_valid 'asicflow cts 0 true'",
                            "api:  chip.set('flowgraph','asicflow','cts','0','valid',True)"
                        ],
                        "help": "Flowgraph valid bit specified on a per step and per index basis. The parameter can be used to control flow execution. If the bit is cleared (0), then the step/index combination is invalid and should not be run.",
                        "lock": "false",
                        "require": "all",
                        "scope": "global",
                        "shorthelp": "Flowgraph task valid bit",
                        "signature": null,
                        "switch": "-flowgraph_valid 'flow step index <str>'",
                        "type": "bool",
                        "value": "false"
                    },
                    "weight": {
                        "default": {
                            "defvalue": null,
                            "example": [
                                "cli: -flowgraph_weight 'asicflow cts 0 area_cells 1.0'",
                                "api:  chip.set('flowgraph','asicflow','cts','0','weight','area_cells',1.0)"
                            ],
                            "help": "Weights specified on a per step and per metric basis used to give effective \"goodnes\" score for a step by calculating the sum all step real metrics results by the corresponding per step weights.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Flowgraph metric weights",
                            "signature": null,
                            "switch": "-flowgraph_weight 'flow step metric <float>'",
                            "type": "float",
                            "value": null
                        }
                    }
                }
            }
        }
    },
    "flowstatus": {
        "default": {
            "default": {
                "error": {
                    "defvalue": null,
                    "example": [
                        "cli: -flowstatus_error 'cts 10 1'",
                        "api:  chip.set('flowstatus','cts','10','error',1)"
                    ],
                    "help": "Status parameter that tracks runstep errors.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Flowgraph task error status",
                    "signature": null,
                    "switch": "-flowstatus_error 'step index <int>'",
                    "type": "int",
                    "value": null
                },
                "select": {
                    "defvalue": [],
                    "example": [
                        "cli: -flowstatus_select 'cts 0 (place,42)'",
                        "api:  chip.set('flowstatus','cts','0','select',('place','42'))"
                    ],
                    "help": "List of selected inputs for the current step/index specified as (in_step,in_index) tuple.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Flowgraph task select record",
                    "signature": [],
                    "switch": "-flowstatus_select 'step index <(str,str)>'",
                    "type": "[(str,str)]",
                    "value": []
                }
            }
        }
    },
    "fpga": {
        "arch": {
            "author": [],
            "copy": "true",
            "date": [],
            "defvalue": [],
            "example": [
                "cli: -fpga_arch myfpga.xml",
                "api:  chip.set('fpga', 'arch', 'myfpga.xml')"
            ],
            "filehash": [],
            "hashalgo": "sha256",
            "help": "Architecture definition file for FPGA place and route tool. For the VPR tool, the file is a required XML based description, allowing targeting a large number of virtual and commercial architectures. For most commercial tools, the fpga part name provides enough information to enable compilation and the 'arch' parameter is optional.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "FPGA architecture file",
            "signature": [],
            "switch": "-fpga_arch <file>",
            "type": "[file]",
            "value": []
        },
        "board": {
            "defvalue": null,
            "example": [
                "cli: -fpga_board parallella",
                "api:  chip.set('fpga', 'board', 'parallella')"
            ],
            "help": "Complete board name used as a device target by the FPGA compilation tool. The board name must be an exact string match to the partname hard coded within the FPGA eda tool. The parameter is optional and can be used in place of a partname and pin constraints for some tools.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "FPGA board name",
            "signature": null,
            "switch": "-fpga_board <str>",
            "type": "str",
            "value": null
        },
        "flash": {
            "defvalue": "false",
            "example": [
                "cli: -fpga_flash",
                "api:  chip.set('fpga', 'flash', True)"
            ],
            "help": "Specifies that the bitstream should be flashed in the board/device. The default is to load the bitstream into volatile memory (SRAM).",
            "lock": "false",
            "require": "all",
            "scope": "global",
            "shorthelp": "FPGA flash enable",
            "signature": null,
            "switch": "-fpga_flash <bool>",
            "type": "bool",
            "value": "false"
        },
        "partname": {
            "defvalue": null,
            "example": [
                "cli: -fpga_partname fpga64k",
                "api:  chip.set('fpga', 'partname', 'fpga64k')"
            ],
            "help": "Complete part name used as a device target by the FPGA compilation tool. The part name must be an exact string match to the partname hard coded within the FPGA eda tool.",
            "lock": "false",
            "require": "fpga",
            "scope": "global",
            "shorthelp": "FPGA part name",
            "signature": null,
            "switch": "-fpga_partname <str>",
            "type": "str",
            "value": null
        },
        "program": {
            "defvalue": "false",
            "example": [
                "cli: -fpga_program",
                "api:  chip.set('fpga', 'program', True)"
            ],
            "help": "Specifies that the bitstream should be loaded into an FPGA.",
            "lock": "false",
            "require": "all",
            "scope": "global",
            "shorthelp": "FPGA program enable",
            "signature": null,
            "switch": "-fpga_program <bool>",
            "type": "bool",
            "value": "false"
        },
        "vendor": {
            "defvalue": null,
            "example": [
                "cli: -fpga_vendor acme",
                "api:  chip.set('fpga', 'vendor', 'acme')"
            ],
            "help": "Name of the FPGA vendor. The parameter is used to check part name and to select the eda tool flow in case 'edaflow' is unspecified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "FPGA vendor name",
            "signature": null,
            "switch": "-fpga_vendor <str>",
            "type": "str",
            "value": null
        }
    },
    "frontend": {
        "defvalue": "verilog",
        "example": [
            "cli: -frontend systemverilog",
            "api: chip.set('frontend', 'systemverilog')"
        ],
        "help": "Specifies the frontend that flows should use for importing and processing source files. Default option is 'verilog', also supports 'systemverilog' and 'chisel'. When using the Python API, this parameter must be configured before calling load_target().",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Compilation frontend",
        "signature": null,
        "switch": "-frontend <frontend>",
        "type": "str",
        "value": "verilog"
    },
    "hash": {
        "defvalue": "false",
        "example": [
            "cli: -hash",
            "api: chip.set('hash', True)"
        ],
        "help": "Enables hashing of all inputs and outputs during compilation. The hash values are stored in the hashvalue field of the individual parameters.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Enable file hashing",
        "signature": null,
        "switch": "-hash <bool>",
        "type": "bool",
        "value": "false"
    },
    "idir": {
        "defvalue": [],
        "example": [
            "cli: '+incdir+./mylib'",
            "api: chip.set('idir','./mylib')"
        ],
        "help": "Search paths to look for files included in the design using the ```include`` statement.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design search paths",
        "signature": [],
        "switch": [
            "+incdir+<dir>",
            "-I <dir>"
        ],
        "type": "[dir]",
        "value": []
    },
    "indexlist": {
        "defvalue": [],
        "example": [
            "cli: -indexlist 0",
            "api: chip.set('indexlist','0')"
        ],
        "help": "List of indices to execute. The default is to execute all indices for each step of a run.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Compilation index list",
        "signature": [],
        "switch": "-indexlist <index>",
        "type": "[str]",
        "value": []
    },
    "jobincr": {
        "defvalue": "false",
        "example": [
            "cli: -jobincr",
            "api: chip.set('jobincr', True)"
        ],
        "help": "Forces an auto-update of the jobname parameter if a directory matching the jobname is found in the build directory. If the jobname does not include a trailing digit, then a the number '1' is added to the jobname before updating the jobname parameter.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Autoincrement jobname",
        "signature": null,
        "switch": "-jobincr <bool>",
        "type": "bool",
        "value": "false"
    },
    "jobinput": {
        "default": {
            "default": {
                "default": {
                    "defvalue": null,
                    "example": [
                        "cli: -jobinput 'job1 cts 0 job0'",
                        "api:  chip.set('jobinput', 'job1', 'cts, '0', 'job0')"
                    ],
                    "help": "Specifies jobname inputs for the current run() on a per step and per index basis. During execution, the default behavior is to copy inputs from the current job.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Input job name",
                    "signature": null,
                    "switch": "-jobinput 'job step index <str>'",
                    "type": "str",
                    "value": null
                }
            }
        }
    },
    "jobname": {
        "defvalue": "job0",
        "example": [
            "cli: -jobname may1",
            "api: chip.set('jobname','may1')"
        ],
        "help": "Jobname during invocation of run(). The jobname combined with a defined director structure (<dir>/<design>/<jobname>/<step>/<index>) enables multiple levels of transparent job, step, and index introspection.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Job name",
        "signature": null,
        "switch": "-jobname <str>",
        "type": "str",
        "value": "job0"
    },
    "jobscheduler": {
        "defvalue": null,
        "example": [
            "cli: -jobscheduler slurm",
            "api: chip.set('jobscheduler','slurm')"
        ],
        "help": "Sets the type of job scheduler to be used for each individual flowgraph steps. If the parameter is undefined, the steps are executed on the same machine that the SC was launched on. If 'slurm' is used, the host running the 'sc' command must be running a 'slurmctld' daemon managing a Slurm cluster. Additionally, the build directory ('-dir') must be located in shared storage which can be accessed by all hosts in the cluster.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Job scheduler name",
        "signature": null,
        "switch": "-jobscheduler <str>",
        "type": "str",
        "value": null
    },
    "libext": {
        "defvalue": [],
        "example": [
            "cli: +libext+sv",
            "api: chip.set('libext','sv')"
        ],
        "help": "List of file extensions that should be used for finding modules. For example, if -y is specified as ./lib\", and '.v' is specified as libext then the files ./lib/\\*.v \", will be searched for module matches.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design file extensions",
        "signature": [],
        "switch": "+libext+<str>",
        "type": "[str]",
        "value": []
    },
    "library": {
        "default": {
            "aocv": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_aocv 'lib ss lib ss.lib.gz'",
                            "api: chip.set('library','lib','aocv','ss','lib','ss.lib.gz')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepaths to AOCV models. Timing files are specified per lib, corner, and filetype basis. Acceptable file formats include 'lib', 'lib.gz', and 'ldb'.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library AOCV timing model",
                        "signature": [],
                        "switch": "-library_aocv 'lib corner filetype <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "arch": {
                "defvalue": null,
                "example": [
                    "cli: -library_arch 'mylib 12t'",
                    "api: chip.set('library','mylib','arch,'12t')"
                ],
                "help": "Specifier string that identifies the row height or performance class of a standard cell library for APR. The arch must match up with the name used in the pdk_aprtech dictionary. Mixing of library archs in a flat place and route block is not allowed. Examples of library archs include 6 track libraries, 9 track libraries, 10 track libraries, etc. The parameter is optional for 'component' libtypes.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library architecture",
                "signature": null,
                "switch": "-library_arch 'lib <str>'",
                "type": "str",
                "value": null
            },
            "ccs": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_ccs 'lib ss lib ss.lib.gz'",
                            "api: chip.set('library','lib','ccs','ss','lib','ss.lib.gz')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepaths to CCS models. Timing files are specified per lib, corner, and filetype basis. Acceptable file formats include 'lib', 'lib.gz', and 'ldb'.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library CCS timing model",
                        "signature": [],
                        "switch": "-library_ccs 'lib corner filetype <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "cells": {
                "antenna": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_antenna 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',antenna,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library antenna cell list",
                    "signature": [],
                    "switch": "-library_cells_antenna 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "buf": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_buf 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',buf,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library buf cell list",
                    "signature": [],
                    "switch": "-library_cells_buf 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "clkbuf": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_clkbuf 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',clkbuf,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library clkbuf cell list",
                    "signature": [],
                    "switch": "-library_cells_clkbuf 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "clkgate": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_clkgate 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',clkgate,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library clkgate cell list",
                    "signature": [],
                    "switch": "-library_cells_clkgate 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "clkinv": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_clkinv 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',clkinv,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library clkinv cell list",
                    "signature": [],
                    "switch": "-library_cells_clkinv 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "clklogic": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_clklogic 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',clklogic,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library clklogic cell list",
                    "signature": [],
                    "switch": "-library_cells_clklogic 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "driver": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_driver 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',driver,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library driver cell list",
                    "signature": [],
                    "switch": "-library_cells_driver 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "endcap": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_endcap 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',endcap,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library endcap cell list",
                    "signature": [],
                    "switch": "-library_cells_endcap 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "filler": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_filler 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',filler,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library filler cell list",
                    "signature": [],
                    "switch": "-library_cells_filler 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "hold": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_hold 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',hold,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library hold cell list",
                    "signature": [],
                    "switch": "-library_cells_hold 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "ignore": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_ignore 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',ignore,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library ignore cell list",
                    "signature": [],
                    "switch": "-library_cells_ignore 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "load": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_load 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',load,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library load cell list",
                    "signature": [],
                    "switch": "-library_cells_load 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "tap": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_tap 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',tap,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library tap cell list",
                    "signature": [],
                    "switch": "-library_cells_tap 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "tie": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_tie 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',tie,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed directly by the designer and tools. The example below shows how all cells containing the string 'eco' could be marked as dont use for the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library tie cell list",
                    "signature": [],
                    "switch": "-library_cells_tie 'lib <str>'",
                    "type": "[str]",
                    "value": []
                }
            },
            "checklist": {
                "default": {
                    "default": {
                        "criteria": {
                            "defvalue": [],
                            "example": [
                                "cli: -library_checklist_criteria 'lib ISO D000 errors==0'",
                                "api: chip.set('library','default','checklist','ISO','D000','criteria','errors==0')"
                            ],
                            "help": "Simple list of signoff criteria for {group} checklist item which must all be met for signoff. Each signoff criteria consists of a metric, a relational operator, and a value in the form. 'metric op value'.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item criteria",
                            "signature": [],
                            "switch": "-library_checklist_criteria 'lib standard item <float>'",
                            "type": "[str]",
                            "value": []
                        },
                        "description": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_checklist_description 'lib ISO D000 A-DESCRIPTION'",
                                "api: chip.set('library','default','checklist','ISO','D000','description','A-DESCRIPTION')"
                            ],
                            "help": "A short one line description of the {group} checklist item.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item description",
                            "signature": null,
                            "switch": "-library_checklist_description 'lib standard item <str>",
                            "type": "str",
                            "value": null
                        },
                        "index": {
                            "defvalue": "0",
                            "example": [
                                "cli: -library_checklist_index 'lib ISO D000 1'",
                                "api: chip.set('library','default','checklist','ISO','D000','index','1')"
                            ],
                            "help": "Flowgraph index used to verify the {group} checklist item. The parameter should be left empty for manual checks and for tool flows that bypass the SC infrastructure.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item index",
                            "signature": null,
                            "switch": "-library_checklist_index 'lib standard item <str>'",
                            "type": "str",
                            "value": "0"
                        },
                        "ok": {
                            "defvalue": "false",
                            "example": [
                                "cli: -library_checklist_ok 'lib ISO D000 true'",
                                "api: chip.set('library','default','checklist','ISO','D000','ok', True)"
                            ],
                            "help": "Boolean check mark for the {group} checklist item. A value of True indicates a human has inspected the all item dictionary parameters check out.",
                            "lock": "false",
                            "require": "all",
                            "scope": "global",
                            "shorthelp": "Library checklist item ok",
                            "signature": null,
                            "switch": "-library_checklist_ok 'lib standard item <str>'",
                            "type": "bool",
                            "value": "false"
                        },
                        "rationale": {
                            "defvalue": [],
                            "example": [
                                "cli: -library_checklist_rational 'lib ISO D000 reliability'",
                                "api: chip.set('library','default','checklist','ISO','D000','rationale','reliability')"
                            ],
                            "help": "Rationale for the the {group} checklist item. Rationale should be a unique alphanumeric code used by the standard or a short one line or single word description.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item rational",
                            "signature": [],
                            "switch": "-library_checklist_rationale 'lib standard item <str>",
                            "type": "[str]",
                            "value": []
                        },
                        "report": {
                            "default": {
                                "author": [],
                                "copy": "false",
                                "date": [],
                                "defvalue": [],
                                "example": [
                                    "cli: -library_checklist_report 'lib ISO D000 bold my.rpt'",
                                    "api: chip.set('library','default','checklist','ISO','D000','report','hold', 'my.rpt')"
                                ],
                                "filehash": [],
                                "hashalgo": "sha256",
                                "help": "Filepath to report(s) of specified type documenting the successful validation of the {group} checklist item. Specified on a per metric basis.",
                                "lock": "false",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "Library checklist item metric report",
                                "signature": [],
                                "switch": "-library_checklist_report 'lib standard item metric <file>'",
                                "type": "[file]",
                                "value": []
                            }
                        },
                        "requirement": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_checklist_requirement 'lib ISO D000 DOCSTRING'",
                                "api: chip.set('library','default','checklist','ISO','D000','requirement','DOCSTRING')"
                            ],
                            "help": "A complete requirement description of the {group} checklist item entered as a multi-line string.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item requirement",
                            "signature": null,
                            "switch": "-library_checklist_requirement 'lib standard item <str>",
                            "type": "str",
                            "value": null
                        },
                        "step": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_checklist_step 'lib ISO D000 place'",
                                "api: chip.set('library','default','checklist','ISO','D000','step','place')"
                            ],
                            "help": "Flowgraph step used to verify the {group} checklist item. The parameter should be left empty for manual and for tool flows that bypass the SC infrastructure.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item step",
                            "signature": null,
                            "switch": "-library_checklist_step 'lib standard item <str>'",
                            "type": "str",
                            "value": null
                        },
                        "waiver": {
                            "default": {
                                "author": [],
                                "copy": "false",
                                "date": [],
                                "defvalue": [],
                                "example": [
                                    "cli: -library_checklist_waiver 'lib ISO D000 bold my.txt'",
                                    "api: chip.set('library','default','checklist','ISO','D000','waiver','hold', 'my.txt')"
                                ],
                                "filehash": [],
                                "hashalgo": "sha256",
                                "help": "Filepath to report(s) documenting waivers for the {group} checklist item specified on a per metric basis.",
                                "lock": "false",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "Library checklist item metric waivers",
                                "signature": [],
                                "switch": "-library_checklist_waiver 'lib standard item metric <file>'",
                                "type": "[file]",
                                "value": []
                            }
                        }
                    }
                }
            },
            "def": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_def 'mylib 10M mylib.def'",
                        "api: chip.set('library','mylib','def','10M','mylib.def')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library DEF layout files specified on a per stackup basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library DEF layout files",
                    "signature": [],
                    "switch": "-library_def 'lib stackup <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "default": {
                "source": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_source 'mylib hello hello.v'",
                        "api: chip.set('library','mylib','hello','source','hello.v')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library source files specified on a per design basis. File type is inferred from the file suffix. The parameter is required or 'soft' library types and optional for 'hard' and 'stdcell' library types. (\\*.v, \\*.vh) = Verilog (\\*.vhd)      = VHDL (\\*.sv)       = SystemVerilog (\\*.c)        = C (\\*.cpp, .cc) = C++ (\\*.py)       = Python",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library source files",
                    "signature": [],
                    "switch": "-library_source 'lib design <file>'",
                    "type": "[file]",
                    "value": []
                },
                "stackup": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_stackup 'mylib freepdk45 M10",
                        "api:  chip.set('library','mylib','freepdk45','stackup','M10')"
                    ],
                    "help": "List of stackups supported for the specified PDK.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library stackups",
                    "signature": [],
                    "switch": "-library_stackup 'lib pdk <str>'",
                    "type": "[str]",
                    "value": []
                },
                "testbench": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_testbench 'mylib hello tb_top.v'",
                        "api: chip.set('library','mylib, 'hello','testbench','tb_top.v')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "A list of all library testbench sources. The files are read in order from first to last entered. File type is inferred from the file suffix: (\\*.v, \\*.vh) = Verilog (\\*.vhd)      = VHDL (\\*.sv)       = SystemVerilog (\\*.c)        = C (\\*.cpp, .cc) = C++ (\\*.py)       = Python",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library testbench files",
                    "signature": [],
                    "switch": "-library_testbench 'lib design <file>'",
                    "type": "[file]",
                    "value": []
                },
                "testmodule": {
                    "defvalue": [],
                    "example": [
                        "cli: -libtary_testmodule 'mylib hello test_top'",
                        "api: chip.set('library','mylib','hello','testmodule', 'test_top')"
                    ],
                    "help": "Top level test module specified on a per design basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Testbench top module",
                    "signature": [],
                    "switch": "-library_testmodule 'lib design <str>'",
                    "type": "[str]",
                    "value": []
                },
                "waveform": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_waveform 'mylib hello mytrace.vcd'",
                        "api: chip.set('library','mylib','hello','waveform','mytrace.vcd')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Library waveform(s) used as a golden test vectors to ensure that compilation transformations do not modify the functional behavior of the source code. The waveform file must be compatible with the testbench and compilation flow tools. The wavefor is supplied on a per design basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library golden waveforms",
                    "signature": [],
                    "switch": "-library_waveform 'lib design <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "design": {
                "defvalue": [],
                "example": [
                    "cli: -library_design 'mylib mytop'",
                    "api: chip.set('library','mylib','design','mytop')"
                ],
                "help": "List of complete design functions within the library that can be instantiated directly by the caller.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library designs",
                "signature": [],
                "switch": "-library_design 'lib <str>'",
                "type": "[str]",
                "value": []
            },
            "dir": {
                "default": {
                    "default": {
                        "default": {
                            "defvalue": [],
                            "example": [
                                "cli: -library_dir 'lib atool db 10M ~/libdb'",
                                "api: chip.set('library','lib','dir','atool','db',10M,'~/libdb')"
                            ],
                            "help": "List of named dirs specified on a per tool and per stackup basis. The parameter should only be used for specifying dirs that are not directly supported by the Library schema.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library named directory",
                            "signature": [],
                            "switch": "-library_dir 'lib tool key stackup <dir>'",
                            "type": "[dir]",
                            "value": []
                        }
                    }
                }
            },
            "file": {
                "default": {
                    "default": {
                        "default": {
                            "author": [],
                            "copy": "false",
                            "date": [],
                            "defvalue": [],
                            "example": [
                                "cli: -library_file 'lib atool db 10M ~/libdb'",
                                "api: chip.set('library','lib','file','atool','db',10M,'~/libdb')"
                            ],
                            "filehash": [],
                            "hashalgo": "sha256",
                            "help": "List of named files specified on a per tool and per stackup basis. The parameter should only be used for specifying files that are not directly supported by the Library schema.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library named file",
                            "signature": [],
                            "switch": "-library_file 'lib tool key stackup <file>'",
                            "type": "[file]",
                            "value": []
                        }
                    }
                }
            },
            "gds": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_gds 'mylib 10M mylib.gds'",
                        "api: chip.set('library','mylib','gds','10M','mylib.gds')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library GDS layout files specified on a per stackup basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library GDS layout files",
                    "signature": [],
                    "switch": "-library_gds 'lib stackup <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "gerber": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_gerber 'mylib 10M mylib.gerber'",
                        "api: chip.set('library','mylib','gerber','10M','mylib.gerber')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library GERBER layout files specified on a per stackup basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library GERBER layout files",
                    "signature": [],
                    "switch": "-library_gerber 'lib stackup <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "lef": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_lef 'mylib 10M mylib.lef'",
                        "api: chip.set('library','mylib','lef','10M','mylib.lef')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library LEF layout files specified on a per stackup basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library LEF layout files",
                    "signature": [],
                    "switch": "-library_lef 'lib stackup <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "model": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_model_gem5 'mylib model.gem5'",
                        "api: chip.set('library','mylib','model',gem5,'model.gem5')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library gem5 models.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "'Library {item} model",
                    "signature": [],
                    "switch": "-library_model_gem5 'lib <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "netlist": {
                "cdl": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_cdl_netlist 'mylib cdl mylib.cdl'",
                        "api: chip.set('library','mylib','netlist','cdl','mylib.cdl')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the cdl format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library cdl netlist",
                    "signature": [],
                    "switch": "-library_cdl_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "edifpspice": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_edifpspice_netlist 'mylib cdl mylib.edifpspice'",
                        "api: chip.set('library','mylib','netlist','edifpspice','mylib.edifpspice')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the edifpspice format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library edifpspice netlist",
                    "signature": [],
                    "switch": "-library_edifpspice_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "hspice": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_hspice_netlist 'mylib cdl mylib.hspice'",
                        "api: chip.set('library','mylib','netlist','hspice','mylib.hspice')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the hspice format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library hspice netlist",
                    "signature": [],
                    "switch": "-library_hspice_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "spectreedif": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_spectreedif_netlist 'mylib cdl mylib.spectreedif'",
                        "api: chip.set('library','mylib','netlist','spectreedif','mylib.spectreedif')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the spectreedif format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library spectreedif netlist",
                    "signature": [],
                    "switch": "-library_spectreedif_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "verilog": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_verilog_netlist 'mylib cdl mylib.verilog'",
                        "api: chip.set('library','mylib','netlist','verilog','mylib.verilog')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the verilog format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library verilog netlist",
                    "signature": [],
                    "switch": "-library_verilog_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "vhdl": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_vhdl_netlist 'mylib cdl mylib.vhdl'",
                        "api: chip.set('library','mylib','netlist','vhdl','mylib.vhdl')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the vhdl format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library vhdl netlist",
                    "signature": [],
                    "switch": "-library_vhdl_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "nldm": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_nldm 'lib ss lib ss.lib.gz'",
                            "api: chip.set('library','lib','nldm','ss','lib','ss.lib.gz')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepaths to NLDM models. Timing files are specified per lib, corner, and filetype basis. Acceptable file formats include 'lib', 'lib.gz', and 'ldb'.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library NLDM timing model",
                        "signature": [],
                        "switch": "-library_nldm 'lib corner filetype <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "package": {
                "author": {
                    "default": {
                        "email": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_email 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','email','wiley@acme.com')"
                            ],
                            "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author email",
                            "signature": null,
                            "switch": "-library_package_author_email 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        },
                        "location": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_location 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','location','wiley@acme.com')"
                            ],
                            "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author location",
                            "signature": null,
                            "switch": "-library_package_author_location 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        },
                        "name": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_name 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','name','wiley@acme.com')"
                            ],
                            "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author name",
                            "signature": null,
                            "switch": "-library_package_author_name 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        },
                        "organization": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_organization 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','organization','wiley@acme.com')"
                            ],
                            "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author organization",
                            "signature": null,
                            "switch": "-library_package_author_organization 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        },
                        "publickey": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_publickey 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','publickey','wiley@acme.com')"
                            ],
                            "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author publickey",
                            "signature": null,
                            "switch": "-library_package_author_publickey 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        },
                        "username": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_username 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','username','wiley@acme.com')"
                            ],
                            "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author username",
                            "signature": null,
                            "switch": "-library_package_author_username 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        }
                    }
                },
                "dependency": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_dependency 'lib hell0 1.0'",
                            "api: chip.set('library', 'lib', 'package','dependency','hello', '1.0')"
                        ],
                        "help": "{shelp} dependencies specified as a key value pair. Versions shall follow the semver standard.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package version dependancies",
                        "signature": [],
                        "switch": "-library_package_dependency 'lib <str>'",
                        "type": "[str]",
                        "value": []
                    }
                },
                "description": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_description 'lib Yet another cpu'",
                        "api: chip.set('library', 'lib', 'package','description','Yet another cpu')"
                    ],
                    "help": "{shelp} short one line description for package managers and summary reports.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package description",
                    "signature": null,
                    "switch": "-library_package_description 'lib <str>'",
                    "type": "str",
                    "value": null
                },
                "doc": {
                    "datasheet": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_datasheet 'lib datasheet.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',datasheet,'datasheet.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "{shelp} list of {item} documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package datasheet document",
                        "signature": [],
                        "switch": "-library_package_doc_datasheet 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "homepage": {
                        "defvalue": null,
                        "example": [
                            "cli: -library_package_doc_homepage 'lib index.html'",
                            "api: chip.set('library', 'lib', 'package','doc', 'homepage','index.html')"
                        ],
                        "help": "{shelp} documentation homepage. Filepath to design docs homepage. Complex designs can can include a long non standard list of documents dependent.  A single html entry point can be used to present an organized documentation dashboard to the designer.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package documentation homepage",
                        "signature": null,
                        "switch": "-library_package_doc_homepage 'lib <str>'",
                        "type": "str",
                        "value": null
                    },
                    "quickstart": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_quickstart 'lib quickstart.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',quickstart,'quickstart.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "{shelp} list of {item} documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package quickstart document",
                        "signature": [],
                        "switch": "-library_package_doc_quickstart 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "reference": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_reference 'lib reference.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',reference,'reference.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "{shelp} list of {item} documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package reference document",
                        "signature": [],
                        "switch": "-library_package_doc_reference 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "releasenotes": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_releasenotes 'lib releasenotes.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',releasenotes,'releasenotes.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "{shelp} list of {item} documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package releasenotes document",
                        "signature": [],
                        "switch": "-library_package_doc_releasenotes 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "signoff": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_signoff 'lib signoff.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',signoff,'signoff.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "{shelp} list of {item} documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package signoff document",
                        "signature": [],
                        "switch": "-library_package_doc_signoff 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "testplan": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_testplan 'lib testplan.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',testplan,'testplan.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "{shelp} list of {item} documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package testplan document",
                        "signature": [],
                        "switch": "-library_package_doc_testplan 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "tutorial": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_tutorial 'lib tutorial.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',tutorial,'tutorial.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "{shelp} list of {item} documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package tutorial document",
                        "signature": [],
                        "switch": "-library_package_doc_tutorial 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "userguide": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_userguide 'lib userguide.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',userguide,'userguide.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "{shelp} list of {item} documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package userguide document",
                        "signature": [],
                        "switch": "-library_package_doc_userguide 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    }
                },
                "homepage": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_homepage 'lib index.html'",
                        "api: chip.set('library', 'lib', 'package','homepage','index.html')"
                    ],
                    "help": "{shelp} homepage.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package project homepage",
                    "signature": null,
                    "switch": "-library_package_homepage 'lib <str>'",
                    "type": "str",
                    "value": null
                },
                "keyword": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_keyword 'lib cpu'",
                        "api: chip.set('library', 'lib', 'package','keyword','cpu')"
                    ],
                    "help": "{shelp} keyword(s) used to characterize package.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package keyword",
                    "signature": null,
                    "switch": "-library_package_keyword 'lib <str>'",
                    "type": "str",
                    "value": null
                },
                "license": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_license 'lib Apache-2.0'",
                        "api: chip.set('library', 'lib', 'package','license','Apache-2.0')"
                    ],
                    "help": "{shelp} list of SPDX license identifiers.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package license identifiers",
                    "signature": [],
                    "switch": "-library_package_license 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "licensefile": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_licensefile 'lib ./LICENSE'",
                        "api: chip.set('library', 'lib', 'package','licensefile','./LICENSE')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "{shelp} list of license files for {group} to be applied in cases when a SPDX identifier is not available. (eg. proprietary licenses).list of SPDX license identifiers.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package license files",
                    "signature": [],
                    "switch": "-library_package_licensefile 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "location": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_location 'lib mars'",
                        "api: chip.set('library', 'lib', 'package','location','mars')"
                    ],
                    "help": "{shelp} country of origin specified as standardized international country codes. The field can be left blank if the location is unknown or global.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package location",
                    "signature": [],
                    "switch": "-library_package_location 'lib <file>'",
                    "type": "[str]",
                    "value": []
                },
                "name": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_name 'lib yac'",
                        "api: chip.set('library', 'lib', 'package','name','yac')"
                    ],
                    "help": "{shelp} name.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package name",
                    "signature": null,
                    "switch": "-library_package_name 'lib <str>'",
                    "type": "str",
                    "value": null
                },
                "organization": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_organization 'lib humanity'",
                        "api: chip.set('library', 'lib', 'package','organization','humanity')"
                    ],
                    "help": "{shelp} sponsoring organization. The field can be left blank if not applicable.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package sponsoring organization",
                    "signature": [],
                    "switch": "-library_package_organzation 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "publickey": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_publickey 'lib 6EB695706EB69570'",
                        "api: chip.set('library', 'lib', 'package','publickey','6EB695706EB69570')"
                    ],
                    "help": "{shelp} public project key.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package public key",
                    "signature": null,
                    "switch": "-library_package_publickey 'lib <str>'",
                    "type": "str",
                    "value": null
                },
                "repo": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_repo 'lib git@github.com:aolofsson/oh.git'",
                        "api: chip.set('library', 'lib', 'package','repo','git@github.com:aolofsson/oh.git')"
                    ],
                    "help": "{shelp} IP address to source code repository.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package code repository",
                    "signature": [],
                    "switch": "-library_package_repo 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "target": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_target 'lib asicflow_freepdk45'",
                        "api: chip.set('library', 'lib', 'package','target','asicflow_freepdk45')"
                    ],
                    "help": "{shelp} list of qualified compilation targets.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package qualified targets",
                    "signature": [],
                    "switch": "-library_package_target 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "version": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_version 'lib 1.0'",
                        "api: chip.set('library', 'lib', 'package','version','1.0')"
                    ],
                    "help": "{shelp} version. Can be a branch, tag, commit hash, or a semver compatible version.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package version",
                    "signature": null,
                    "switch": "-library_package_version 'lib <str>'",
                    "type": "str",
                    "value": null
                }
            },
            "pdk": {
                "defvalue": [],
                "example": [
                    "cli: -library_pdk 'mylib freepdk45",
                    "api:  chip.set('library', 'mylib', 'pdk', 'freepdk45')"
                ],
                "help": "List of PDK modules supported by the library. The parameter is required for technology hardened ASIC libraries.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library PDK",
                "signature": [],
                "switch": "-library_pdk 'lib <str>'",
                "type": "[str]",
                "value": []
            },
            "pgmetal": {
                "defvalue": null,
                "example": [
                    "cli: -library_pgmetal 'mylib m1'",
                    "api: chip.set('library','mylib','pgmetal','m1')"
                ],
                "help": "Top metal layer used for power and ground routing within the library. The parameter can be used to guide cell power grid hookup by APR tools.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library PG layer",
                "signature": null,
                "switch": "-library_pgmetal 'lib <str>'",
                "type": "str",
                "value": null
            },
            "scm": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_scm 'lib ss lib ss.lib.gz'",
                            "api: chip.set('library','lib','scm','ss','lib','ss.lib.gz')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepaths to SCM models. Timing files are specified per lib, corner, and filetype basis. Acceptable file formats include 'lib', 'lib.gz', and 'ldb'.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library SCM timing model",
                        "signature": [],
                        "switch": "-library_scm 'lib corner filetype <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "site": {
                "default": {
                    "size": {
                        "defvalue": null,
                        "example": [
                            "cli: -library_site_size 'mylib core (1.0,1.0)'",
                            "api: chip.set('library','mylib','site','core','size',(1.0,1.0))"
                        ],
                        "help": "Size of the library size described as a (width, height) tuple in microns.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library site size",
                        "signature": null,
                        "switch": "-library_site_size 'lib name <str>'",
                        "type": "(float,float)",
                        "value": null
                    },
                    "symmetry": {
                        "defvalue": null,
                        "example": [
                            "cli: -library_site_symmetry 'mylib core X Y'",
                            "api: chip.set('library','mylib','site','core','symmetry','X Y')"
                        ],
                        "help": "Site flip-symmetry based on LEF standard definition. 'X' implies symmetric about the x axis, 'Y' implies symmetry about the y axis, and 'X Y' implies symmetry about the x and y axis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library site symmetry",
                        "signature": null,
                        "switch": "-library_site_symmetry 'lib name <str>'",
                        "type": "str",
                        "value": null
                    }
                }
            },
            "tag": {
                "defvalue": [],
                "example": [
                    "cli: -library_tag 'mylib virtual'",
                    "api: chip.set('library','mylib','tag','virtual')"
                ],
                "help": "Marks a library with a set of tags that can be used by the designer and EDA tools for optimization purposes. The tags are meant to cover features not currently supported by built in EDA optimization flows, but which can be queried through EDA tool TCL commands and lists. The example below demonstrates tagging the whole library as virtual.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library tags",
                "signature": [],
                "switch": "-library_tag 'lib <str>'",
                "type": "[str]",
                "value": []
            },
            "techmap": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_techmap 'lib mylib yosys map.v'",
                        "api: chip.set('library', 'mylib', 'techmap', 'yosys','map.v')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Filepaths specifying mappings from tool-specific generic cells to library cells.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library techmap file",
                    "signature": [],
                    "switch": "-library_techmap 'lib tool <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "type": {
                "defvalue": null,
                "example": [
                    "cli: -library_type 'mylib logiclib'",
                    "api: chip.set('library','mylib','type','logiclib')"
                ],
                "help": "Type of the library being configured. A 'logiclib' type is reserved for fixed height cell libraries. A 'soft' type indicates a library that is provided as target agnostic source code, and a 'hard' type indicates a non-logiclib target specificlibrary.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library type",
                "signature": null,
                "switch": "-library_type 'lib <str>'",
                "type": "str",
                "value": null
            }
        }
    },
    "loglevel": {
        "defvalue": "WARNING",
        "example": [
            "cli: -loglevel INFO",
            "api: chip.set('loglevel', 'INFO')"
        ],
        "help": "Provides explicit control over the level of debug logging printed. Valid entries include INFO, DEBUG, WARNING, ERROR.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Logging level",
        "signature": null,
        "switch": "-loglevel <str>",
        "type": "str",
        "value": "WARNING"
    },
    "mcmm": {
        "default": {
            "check": {
                "defvalue": [],
                "example": [
                    "cli: -mcmm_check 'worst check setup'",
                    "api: chip.add('mcmm','worst','check','setup')"
                ],
                "help": "List of checks for to perform for the scenario. The checks must align with the capabilities of the EDA tools and flow being used. Checks generally include objectives like meeting setup and hold goals and minimize power. Standard check names include setup, hold, power, noise, reliability.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Scenario checks",
                "signature": [],
                "switch": "-mcmm_check 'scenario <str>'",
                "type": "[str]",
                "value": []
            },
            "constraint": {
                "author": [],
                "copy": "true",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -mcmm_constraint 'worst hello.sdc'",
                    "api: chip.set('mcmm','worst','constraint', 'hello.sdc')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "List of timing constraint files to use for the scenario. The values are combined with any constraints specified by the design 'constraint' parameter. If no constraints are found, a default constraint file is used based on the clock definitions.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Scenario constraints files",
                "signature": [],
                "switch": "-mcmm_constraint 'scenario <file>'",
                "type": "[file]",
                "value": []
            },
            "libcorner": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_libcorner 'worst ttt'",
                    "api: chip.set('mcmm', 'worst', 'libcorner', 'ttt')"
                ],
                "help": "Library corner applied to the scenario to scale library timing models based on the libcorner value for models that support it. The parameter is ignored for libraries that have one hard coded model per libcorner.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Scenario library corner",
                "signature": null,
                "switch": "-mcmm_libcorner 'scenario <str>'",
                "type": "str",
                "value": null
            },
            "mode": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_mode 'worst test'",
                    "api: chip.set('mcmm',  'worst','mode', 'test')"
                ],
                "help": "Operating mode for the scenario. Operating mode strings can be values such as test, functional, standby.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Scenario operating mode",
                "signature": null,
                "switch": "-mcmm_mode 'scenario <str>'",
                "type": "str",
                "value": null
            },
            "opcond": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_opcond 'worst typical_1.0'",
                    "api: chip.set('mcmm', 'worst', 'opcond',  'typical_1.0')"
                ],
                "help": "Operating condition applied to the scenario. The value can be used to access specific conditions within the library timing models from the 'logiclib' timing models.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Scenario operating condition",
                "signature": null,
                "switch": "-mcmm_opcond 'scenario <str>'",
                "type": "str",
                "value": null
            },
            "pexcorner": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_pexcorner 'worst max'",
                    "api: chip.set('mcmm', 'worst', 'pexcorner', 'max')"
                ],
                "help": "Parasitic corner applied to the scenario. The 'pexcorner' string must match a corner found in the pdk pexmodel setup.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Scenario pex corner",
                "signature": null,
                "switch": "-mcmm_pexcorner 'scenario <str>'",
                "type": "str",
                "value": null
            },
            "temperature": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_temperature 'worst 125'",
                    "api: chip.set('mcmm', 'worst', 'temperature','125')"
                ],
                "help": "Chip temperature applied to the scenario specified in degrees Celsius.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Scenario temperature",
                "signature": null,
                "switch": "-mcmm_temperature 'scenario <float>'",
                "type": "float",
                "value": null
            },
            "voltage": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_voltage 'worst 0.9'",
                    "api: chip.set('mcmm', 'worst','voltage', '0.9')"
                ],
                "help": "Operating voltage applied to the scenario, specified in Volts.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Scenario voltage level",
                "signature": null,
                "switch": "-mcmm_voltage 'scenario <float>'",
                "type": "float",
                "value": null
            }
        }
    },
    "metric": {
        "default": {
            "default": {
                "averagepower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_averagepower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','averagepower','real',0.01)"
                        ],
                        "help": "Metric tracking the average workload power of the design specified on a per step and index basis. Power metric depend heavily on the method being used for extraction: dynamic vs static, workload specification (vcd vs saif), power models, process/voltage/temperature. The power averagepower metric tries to capture the data that would usually be reflected inside a datasheet given the approprate footnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: averagepower",
                        "signature": null,
                        "switch": "-metric_averagepower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "brams": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_brams 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','brams','real',100)"
                        ],
                        "help": "Metric tracking the total FPGA BRAM tiles used by the design as reported by the implementation tool. There is no standardized definition for this metric across vendors, so metric comparisons can generally only be done between runs on identical tools and device families.",
                        "lock": "false",
                        "require": "fpga",
                        "scope": "job",
                        "shorthelp": "Metric: FPGA BRAM tiles",
                        "signature": null,
                        "switch": "-metric_brams 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "buffers": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_buffers 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','buffers','real', 50)"
                        ],
                        "help": "Metric tracking the total number of buffer and inverter instances in the design on a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: buffers",
                        "signature": null,
                        "switch": "-metric_buffers 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "cellarea": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_cellarea 'place 0 goal 100.00'",
                            "api: chip.set('metric','place','0','cellarea','real',100.00)"
                        ],
                        "help": "Metric tracking the total cell area (ignoring fillers) occupied by the design. The metric is specified in um^2.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: cellarea",
                        "signature": null,
                        "switch": "-metric_cellarea 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "cells": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_cells 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','cells','real', 50)"
                        ],
                        "help": "Metric tracking the total number of cell instances in the design on a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: cells",
                        "signature": null,
                        "switch": "-metric_cells 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "coverage": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_coverage 'place 0 goal 99.9'",
                            "api: chip.set('metric','place','0','coverage','goal',99.9)"
                        ],
                        "help": "Metric tracking the test coverage in the design expressed as a percentage with 100 meaning full coverage. The meaning of the metric depends on the task being executed. It can refer to code coverage, feature coverage, stuck at fault coverage.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: coverage",
                        "signature": null,
                        "switch": "-metric_coverage 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "dozepower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_dozepower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','dozepower','real',0.01)"
                        ],
                        "help": "Metric tracking the power consumed while in low frequency operating mode of the design specified on a per step and index basis. Power metric depend heavily on the method being used for extraction: dynamic vs static, workload specification (vcd vs saif), power models, process/voltage/temperature. The power dozepower metric tries to capture the data that would usually be reflected inside a datasheet given the approprate footnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: dozepower",
                        "signature": null,
                        "switch": "-metric_dozepower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "drvs": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_drvs 'dfm 0 goal 0'",
                            "api: chip.set('metric','dfm','0','drvs','real',0)"
                        ],
                        "help": "Metric tracking the total number of design rule violations on a per step and index basis.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: total drvs",
                        "signature": null,
                        "switch": "-metric_drvs 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "dsps": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_dsps 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','dsps','real',100)"
                        ],
                        "help": "Metric tracking the total FPGA DSP slices used by the design as reported by the implementation tool. There is no standardized definition for this metric across vendors, so metric comparisons can generally only be done between runs on identical tools and device families.",
                        "lock": "false",
                        "require": "fpga",
                        "scope": "job",
                        "shorthelp": "Metric: FPGA DSP slices",
                        "signature": null,
                        "switch": "-metric_dsps 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "errors": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_errors 'dfm 0 goal 0'",
                            "api: chip.set('metric','dfm','0','errors','real',0)"
                        ],
                        "help": "Metric tracking the total number of errors on a per step and index basis.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: total errors",
                        "signature": null,
                        "switch": "-metric_errors 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "exetime": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_exetime 'dfm 0 goal 10.0'",
                            "api: chip.set('metric','dfm','0','exetime','real, 10.0)"
                        ],
                        "help": "Metric tracking time spent by the eda executable 'exe' on a per step and index basis. It does not include the siliconcompiler runtime overhead or time waitig for I/O operations and inter-processor communication to complete. The metric unit is seconds.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: exetime",
                        "signature": null,
                        "switch": "-metric_exetime 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "holdpaths": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_holdpaths 'place 0 goal 10'",
                            "api: chip.set('metric','place','0','holdpaths','real',10)"
                        ],
                        "help": "Metric tracking the total number of timing paths violating hold constraints.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: holdpaths",
                        "signature": null,
                        "switch": "-metric_holdpaths 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "holdslack": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_holdslack 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','holdslack','real', 0.01)"
                        ],
                        "help": "Metric tracking the worst hold slack (positive or negative) on a per step and index basis. Metric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: holdslack",
                        "signature": null,
                        "switch": "-metric_holdslack 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "holdtns": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_holdtns 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','holdtns','real', 0.01)"
                        ],
                        "help": "Metric tracking the total negative hold slack (TNS) on a per step and index basis. Metric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: holdtns",
                        "signature": null,
                        "switch": "-metric_holdtns 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "holdwns": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_holdwns 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','holdwns','real', 0.01)"
                        ],
                        "help": "Metric tracking the worst negative hold slack (positive values truncated to zero) on a per step and index basis. Metric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: holdwns",
                        "signature": null,
                        "switch": "-metric_holdwns 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "idlepower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_idlepower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','idlepower','real',0.01)"
                        ],
                        "help": "Metric tracking the power while not performing useful work of the design specified on a per step and index basis. Power metric depend heavily on the method being used for extraction: dynamic vs static, workload specification (vcd vs saif), power models, process/voltage/temperature. The power idlepower metric tries to capture the data that would usually be reflected inside a datasheet given the approprate footnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: idlepower",
                        "signature": null,
                        "switch": "-metric_idlepower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "irdrop": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_irdrop 'place 0 real 0.05'",
                            "api: chip.set('metric','place','0','irdrop','real',0.05)"
                        ],
                        "help": "Metric tracking the peak IR drop in the design based on extracted power and ground rail parasitics, library power models, and switching activity. The switching activity calculated on a per node basis is taken from one of three possible sources, in order of priority: VCD file, SAIF file, 'activityfactor' parameter.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: peak IR drop",
                        "signature": null,
                        "switch": "-metric_irdrop 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "leakagepower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_leakagepower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','leakagepower','real',0.01)"
                        ],
                        "help": "Metric tracking the leakage power with rails active but without any dynamic switching activity of the design specified on a per step and index basis. Power metric depend heavily on the method being used for extraction: dynamic vs static, workload specification (vcd vs saif), power models, process/voltage/temperature. The power leakagepower metric tries to capture the data that would usually be reflected inside a datasheet given the approprate footnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: leakagepower",
                        "signature": null,
                        "switch": "-metric_leakagepower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "luts": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_luts 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','luts','real',100)"
                        ],
                        "help": "Metric tracking the total FPGA LUTs used by the design as reported by the implementation tool. There is no standardized definition for this metric across vendors, so metric comparisons can generally only be done between runs on identical tools and device families.",
                        "lock": "false",
                        "require": "fpga",
                        "scope": "job",
                        "shorthelp": "Metric: FPGA LUTs",
                        "signature": null,
                        "switch": "-metric_luts 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "macros": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_macros 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','macros','real', 50)"
                        ],
                        "help": "Metric tracking the total number of macros in the design on a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: macros",
                        "signature": null,
                        "switch": "-metric_macros 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "memory": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_memory 'dfm 0 goal 10e9'",
                            "api: chip.set('metric','dfm','0','memory','real, 10e9)"
                        ],
                        "help": "Metric tracking total peak program memory footprint on a per step and index basis, specified in bytes.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: memory",
                        "signature": null,
                        "switch": "-metric_memory 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "nets": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_nets 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','nets','real', 50)"
                        ],
                        "help": "Metric tracking the total number of nets in the design on a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: nets",
                        "signature": null,
                        "switch": "-metric_nets 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "overflow": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_overflow 'place 0 goal 0'",
                            "api: chip.set('metric','place','0','overflow','real', 50)"
                        ],
                        "help": "Metric tracking the total number of overflow tracks for the routing on per step and index basis. Any non-zero number suggests an over congested design. To analyze where the congestion is occurring inspect the router log files for detailed per metal overflow reporting and open up the design to find routing hotspots.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: overflow",
                        "signature": null,
                        "switch": "-metric_overflow 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "peakpower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_peakpower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','peakpower','real',0.01)"
                        ],
                        "help": "Metric tracking the worst case total peak power of the design specified on a per step and index basis. Power metric depend heavily on the method being used for extraction: dynamic vs static, workload specification (vcd vs saif), power models, process/voltage/temperature. The power peakpower metric tries to capture the data that would usually be reflected inside a datasheet given the approprate footnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: peakpower",
                        "signature": null,
                        "switch": "-metric_peakpower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "pins": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_pins 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','pins','real', 50)"
                        ],
                        "help": "Metric tracking the total number of pins in the design on a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: pins",
                        "signature": null,
                        "switch": "-metric_pins 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "registers": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_registers 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','registers','real', 50)"
                        ],
                        "help": "Metric tracking the total number of register instances in the design on a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: registers",
                        "signature": null,
                        "switch": "-metric_registers 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "security": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_security 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','security','goal',100)"
                        ],
                        "help": "Metric tracking the level of security (1/vulnerability) of the design. A completely secure design would have a score of 100. There is no absolute scale for the security metrics (like with power, area, etc) so the metric will be task and tool dependent.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: security",
                        "signature": null,
                        "switch": "-metric_security 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "setuppaths": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_setuppaths 'place 0 goal 10'",
                            "api: chip.set('metric','place','0','setuppaths','real',10)"
                        ],
                        "help": "Metric tracking the total number of timing paths violating setup constraints.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: setuppaths",
                        "signature": null,
                        "switch": "-metric_setuppaths 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "setupslack": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_setupslack 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','setupslack','real', 0.01)"
                        ],
                        "help": "Metric tracking the worst setup slack (positive or negative) on a per step and index basis. Metric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: setupslack",
                        "signature": null,
                        "switch": "-metric_setupslack 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "setuptns": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_setuptns 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','setuptns','real', 0.01)"
                        ],
                        "help": "Metric tracking the total negative setup slack (TNS) on a per step and index basis. Metric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: setuptns",
                        "signature": null,
                        "switch": "-metric_setuptns 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "setupwns": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_setupwns 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','setupwns','real', 0.01)"
                        ],
                        "help": "Metric tracking the worst negative setup slack (positive values truncated to zero) on a per step and index basis. Metric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: setupwns",
                        "signature": null,
                        "switch": "-metric_setupwns 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "sleeppower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_sleeppower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','sleeppower','real',0.01)"
                        ],
                        "help": "Metric tracking the power consumed with some or all power rails gated off of the design specified on a per step and index basis. Power metric depend heavily on the method being used for extraction: dynamic vs static, workload specification (vcd vs saif), power models, process/voltage/temperature. The power sleeppower metric tries to capture the data that would usually be reflected inside a datasheet given the approprate footnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: sleeppower",
                        "signature": null,
                        "switch": "-metric_sleeppower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "tasktime": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_tasktime 'dfm 0 goal 10.0'",
                            "api: chip.set('metric','dfm','0','tasktime','real, 10.0)"
                        ],
                        "help": "Metric trakcing the total amount of time spent on a task from beginning to end, including data transfers and pre/post processing. The metric unit is seconds.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: tasktime",
                        "signature": null,
                        "switch": "-metric_tasktime 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "totalarea": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_totalarea 'place 0 goal 100.00'",
                            "api: chip.set('metric','place','0','totalarea','real',100.00)"
                        ],
                        "help": "Metric tracking the total physical die area occupied by the design. The metric is specified in um^2.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: totalarea",
                        "signature": null,
                        "switch": "-metric_totalarea 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "transistors": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_transistors 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','transistors','real', 50)"
                        ],
                        "help": "Metric tracking the total number of transistors in the design on a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: transistors",
                        "signature": null,
                        "switch": "-metric_transistors 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "unconstrained": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_unconstrained 'dfm 0 goal 0'",
                            "api: chip.set('metric','dfm','0','unconstrained','real',0)"
                        ],
                        "help": "Metric tracking the total number of unconstrained timing paths on a per step and index basis.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: total unconstrained",
                        "signature": null,
                        "switch": "-metric_unconstrained 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "utilization": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_utilization 'place 0 goal 50.00'",
                            "api: chip.set('metric','place','0','utilization','real',50.00)"
                        ],
                        "help": "Metric tracking the area utilization of the design calculated as 100 * (cellarea/totalarea).",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: area utilization",
                        "signature": null,
                        "switch": "-metric_utilization step index group <float>",
                        "type": "float",
                        "value": null
                    }
                },
                "vias": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_vias 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','vias','real', 50)"
                        ],
                        "help": "Metric tracking the total number of vias in the design on a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: vias",
                        "signature": null,
                        "switch": "-metric_vias 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "warnings": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_warnings 'dfm 0 goal 0'",
                            "api: chip.set('metric','dfm','0','warnings','real',0)"
                        ],
                        "help": "Metric tracking the total number of warnings on a per step and index basis.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: total warnings",
                        "signature": null,
                        "switch": "-metric_warnings 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "wirelength": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_wirelength 'place 0 goal 100.0'",
                            "api: chip.set('metric','place','0','wirelength','real', 50.0)"
                        ],
                        "help": "Metric tracking the total wirelength of the design on a per step and index basis. The unit is meters.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: wirelength",
                        "signature": null,
                        "switch": "-metric_wirelength 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                }
            }
        }
    },
    "metricoff": {
        "defvalue": [],
        "example": [
            "cli: -metricoff 'wirelength'",
            "api: chip.set('metricoff','wirelength')"
        ],
        "help": "List of metrics to supress when printing out the run summary.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Metric summary filter",
        "signature": [],
        "switch": "-metricoff '<str>'",
        "type": "[str]",
        "value": []
    },
    "mode": {
        "defvalue": null,
        "example": [
            "cli: -mode asic",
            "api: chip.set('mode','asic')"
        ],
        "help": "Sets the operating mode of the compiler. Valid modes are: asic: RTL to GDS ASIC compilation fpga: RTL to bitstream FPGA compilation sim: simulation to verify design and compilation",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Compilation mode",
        "signature": null,
        "switch": "-mode <str>",
        "type": "str",
        "value": null
    },
    "msgcontact": {
        "defvalue": [],
        "example": [
            "cli: -msgcontact 'wile.e.coyote@acme.com'",
            "api: chip.set('msgcontact','wile.e.coyote@acme.com')"
        ],
        "help": "A list of phone numbers or email addresses to message on a event event within the msg_event param. Actual support for email and phone messages is platform dependent.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Message contact",
        "signature": [],
        "switch": "-msgcontact <str>",
        "type": "[str]",
        "value": []
    },
    "msgevent": {
        "defvalue": [],
        "example": [
            "cli: -msgevent export",
            "api: chip.set('msgevent','export')"
        ],
        "help": "A list of steps after which to notify a recipient. For example if values of syn, place, cts are entered separate messages would be sent after the completion of the syn, place, and cts steps.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Message event trigger",
        "signature": [],
        "switch": "-msgevent <str>",
        "type": "[str]",
        "value": []
    },
    "nodisplay": {
        "defvalue": "false",
        "example": [
            "cli: -nodisplay",
            "api: chip.set('nodisplay', True)"
        ],
        "help": "The '-nodisplay' flag prevents SiliconCompiler from opening GUI windows such as the final metrics report.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Headless execution",
        "signature": null,
        "switch": "-nodisplay <bool>",
        "type": "bool",
        "value": "false"
    },
    "oformat": {
        "defvalue": null,
        "example": [
            "cli: -oformat gds",
            "api: chip.set('oformat', 'gds')"
        ],
        "help": "File format to use for writing the final siliconcompiler output to disk. For cases, when only one output format exists, the 'oformat' parameter can be omitted. Examples of ASIC layout output formats include GDS and OASIS.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design output format",
        "signature": null,
        "switch": "-oformat <str>",
        "type": "str",
        "value": null
    },
    "optmode": {
        "defvalue": "O0",
        "example": [
            "cli: -O3",
            "api: chip.set('optmode','3')"
        ],
        "help": "The compiler has modes to prioritize run time and ppa. Modes include. (0) = Exploration mode for debugging setup (1) = Higher effort and better PPA than O0 (2) = Higher effort and better PPA than O1 (3) = Signoff quality. Better PPA and higher run times than O2 (4-98) = Reserved (compiler/target dependent) (99) = Experimental highest possible effort, may be unstable",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Optimization mode",
        "signature": null,
        "switch": "-O<str>",
        "type": "str",
        "value": "O0"
    },
    "package": {
        "author": {
            "default": {
                "email": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_email 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','email','wiley@acme.com')"
                    ],
                    "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author email",
                    "signature": null,
                    "switch": "-package_author_email ' userid <str>'",
                    "type": "str",
                    "value": null
                },
                "location": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_location 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','location','wiley@acme.com')"
                    ],
                    "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author location",
                    "signature": null,
                    "switch": "-package_author_location ' userid <str>'",
                    "type": "str",
                    "value": null
                },
                "name": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_name 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','name','wiley@acme.com')"
                    ],
                    "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author name",
                    "signature": null,
                    "switch": "-package_author_name ' userid <str>'",
                    "type": "str",
                    "value": null
                },
                "organization": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_organization 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','organization','wiley@acme.com')"
                    ],
                    "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author organization",
                    "signature": null,
                    "switch": "-package_author_organization ' userid <str>'",
                    "type": "str",
                    "value": null
                },
                "publickey": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_publickey 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','publickey','wiley@acme.com')"
                    ],
                    "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author publickey",
                    "signature": null,
                    "switch": "-package_author_publickey ' userid <str>'",
                    "type": "str",
                    "value": null
                },
                "username": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_username 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','username','wiley@acme.com')"
                    ],
                    "help": "{shelp} author {item} provided with full name as key and {item} as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author username",
                    "signature": null,
                    "switch": "-package_author_username ' userid <str>'",
                    "type": "str",
                    "value": null
                }
            }
        },
        "dependency": {
            "default": {
                "defvalue": [],
                "example": [
                    "cli: -package_dependency 'hell0 1.0'",
                    "api: chip.set(package,'dependency','hello', '1.0')"
                ],
                "help": "{shelp} dependencies specified as a key value pair. Versions shall follow the semver standard.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package version dependancies",
                "signature": [],
                "switch": "-package_dependency '<str>'",
                "type": "[str]",
                "value": []
            }
        },
        "description": {
            "defvalue": null,
            "example": [
                "cli: -package_description 'Yet another cpu'",
                "api: chip.set(package,'description','Yet another cpu')"
            ],
            "help": "{shelp} short one line description for package managers and summary reports.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package description",
            "signature": null,
            "switch": "-package_description '<str>'",
            "type": "str",
            "value": null
        },
        "doc": {
            "datasheet": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_datasheet 'datasheet.pdf'",
                    "api: chip.set(package,'doc',datasheet,'datasheet.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "{shelp} list of {item} documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package datasheet document",
                "signature": [],
                "switch": "-package_doc_datasheet '<str>'",
                "type": "[file]",
                "value": []
            },
            "homepage": {
                "defvalue": null,
                "example": [
                    "cli: -package_doc_homepage 'index.html'",
                    "api: chip.set(package,'doc', 'homepage','index.html')"
                ],
                "help": "{shelp} documentation homepage. Filepath to design docs homepage. Complex designs can can include a long non standard list of documents dependent.  A single html entry point can be used to present an organized documentation dashboard to the designer.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package documentation homepage",
                "signature": null,
                "switch": "-package_doc_homepage '<str>'",
                "type": "str",
                "value": null
            },
            "quickstart": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_quickstart 'quickstart.pdf'",
                    "api: chip.set(package,'doc',quickstart,'quickstart.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "{shelp} list of {item} documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package quickstart document",
                "signature": [],
                "switch": "-package_doc_quickstart '<str>'",
                "type": "[file]",
                "value": []
            },
            "reference": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_reference 'reference.pdf'",
                    "api: chip.set(package,'doc',reference,'reference.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "{shelp} list of {item} documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package reference document",
                "signature": [],
                "switch": "-package_doc_reference '<str>'",
                "type": "[file]",
                "value": []
            },
            "releasenotes": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_releasenotes 'releasenotes.pdf'",
                    "api: chip.set(package,'doc',releasenotes,'releasenotes.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "{shelp} list of {item} documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package releasenotes document",
                "signature": [],
                "switch": "-package_doc_releasenotes '<str>'",
                "type": "[file]",
                "value": []
            },
            "signoff": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_signoff 'signoff.pdf'",
                    "api: chip.set(package,'doc',signoff,'signoff.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "{shelp} list of {item} documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package signoff document",
                "signature": [],
                "switch": "-package_doc_signoff '<str>'",
                "type": "[file]",
                "value": []
            },
            "testplan": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_testplan 'testplan.pdf'",
                    "api: chip.set(package,'doc',testplan,'testplan.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "{shelp} list of {item} documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package testplan document",
                "signature": [],
                "switch": "-package_doc_testplan '<str>'",
                "type": "[file]",
                "value": []
            },
            "tutorial": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_tutorial 'tutorial.pdf'",
                    "api: chip.set(package,'doc',tutorial,'tutorial.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "{shelp} list of {item} documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package tutorial document",
                "signature": [],
                "switch": "-package_doc_tutorial '<str>'",
                "type": "[file]",
                "value": []
            },
            "userguide": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_userguide 'userguide.pdf'",
                    "api: chip.set(package,'doc',userguide,'userguide.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "{shelp} list of {item} documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package userguide document",
                "signature": [],
                "switch": "-package_doc_userguide '<str>'",
                "type": "[file]",
                "value": []
            }
        },
        "homepage": {
            "defvalue": null,
            "example": [
                "cli: -package_homepage 'index.html'",
                "api: chip.set(package,'homepage','index.html')"
            ],
            "help": "{shelp} homepage.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package project homepage",
            "signature": null,
            "switch": "-package_homepage '<str>'",
            "type": "str",
            "value": null
        },
        "keyword": {
            "defvalue": null,
            "example": [
                "cli: -package_keyword 'cpu'",
                "api: chip.set(package,'keyword','cpu')"
            ],
            "help": "{shelp} keyword(s) used to characterize package.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package keyword",
            "signature": null,
            "switch": "-package_keyword '<str>'",
            "type": "str",
            "value": null
        },
        "license": {
            "defvalue": [],
            "example": [
                "cli: -package_license 'Apache-2.0'",
                "api: chip.set(package,'license','Apache-2.0')"
            ],
            "help": "{shelp} list of SPDX license identifiers.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package license identifiers",
            "signature": [],
            "switch": "-package_license '<str>'",
            "type": "[str]",
            "value": []
        },
        "licensefile": {
            "author": [],
            "copy": "false",
            "date": [],
            "defvalue": [],
            "example": [
                "cli: -package_licensefile './LICENSE'",
                "api: chip.set(package,'licensefile','./LICENSE')"
            ],
            "filehash": [],
            "hashalgo": "sha256",
            "help": "{shelp} list of license files for {group} to be applied in cases when a SPDX identifier is not available. (eg. proprietary licenses).list of SPDX license identifiers.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package license files",
            "signature": [],
            "switch": "-package_licensefile '<file>'",
            "type": "[file]",
            "value": []
        },
        "location": {
            "defvalue": [],
            "example": [
                "cli: -package_location 'mars'",
                "api: chip.set(package,'location','mars')"
            ],
            "help": "{shelp} country of origin specified as standardized international country codes. The field can be left blank if the location is unknown or global.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package location",
            "signature": [],
            "switch": "-package_location '<file>'",
            "type": "[str]",
            "value": []
        },
        "name": {
            "defvalue": null,
            "example": [
                "cli: -package_name 'yac'",
                "api: chip.set(package,'name','yac')"
            ],
            "help": "{shelp} name.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package name",
            "signature": null,
            "switch": "-package_name '<str>'",
            "type": "str",
            "value": null
        },
        "organization": {
            "defvalue": [],
            "example": [
                "cli: -package_organization 'humanity'",
                "api: chip.set(package,'organization','humanity')"
            ],
            "help": "{shelp} sponsoring organization. The field can be left blank if not applicable.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package sponsoring organization",
            "signature": [],
            "switch": "-package_organzation '<str>'",
            "type": "[str]",
            "value": []
        },
        "publickey": {
            "defvalue": null,
            "example": [
                "cli: -package_publickey '6EB695706EB69570'",
                "api: chip.set(package,'publickey','6EB695706EB69570')"
            ],
            "help": "{shelp} public project key.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package public key",
            "signature": null,
            "switch": "-package_publickey '<str>'",
            "type": "str",
            "value": null
        },
        "repo": {
            "defvalue": [],
            "example": [
                "cli: -package_repo 'git@github.com:aolofsson/oh.git'",
                "api: chip.set(package,'repo','git@github.com:aolofsson/oh.git')"
            ],
            "help": "{shelp} IP address to source code repository.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package code repository",
            "signature": [],
            "switch": "-package_repo '<str>'",
            "type": "[str]",
            "value": []
        },
        "target": {
            "defvalue": [],
            "example": [
                "cli: -package_target 'asicflow_freepdk45'",
                "api: chip.set(package,'target','asicflow_freepdk45')"
            ],
            "help": "{shelp} list of qualified compilation targets.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package qualified targets",
            "signature": [],
            "switch": "-package_target '<str>'",
            "type": "[str]",
            "value": []
        },
        "version": {
            "defvalue": null,
            "example": [
                "cli: -package_version '1.0'",
                "api: chip.set(package,'version','1.0')"
            ],
            "help": "{shelp} version. Can be a branch, tag, commit hash, or a semver compatible version.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package version",
            "signature": null,
            "switch": "-package_version '<str>'",
            "type": "str",
            "value": null
        }
    },
    "param": {
        "default": {
            "defvalue": null,
            "example": [
                "cli: -param 'N 64'",
                "api: chip.set('param','N', '64')"
            ],
            "help": "Sets a top level module parameter. The value is limited to basic data literals. The parameter override is passed into tools such as Verilator and Yosys. The parameters support Verilog integer literals (64'h4, 2'b0, 4) and strings. Name of the top level module to compile.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Design parameter",
            "signature": null,
            "switch": "-param 'name <str>'",
            "type": "str",
            "value": null
        }
    },
    "pdk": {
        "aprtech": {
            "default": {
                "default": {
                    "default": {
                        "default": {
                            "author": [],
                            "copy": "false",
                            "date": [],
                            "defvalue": [],
                            "example": [
                                "cli: -pdk_aprtech 'openroad M10 12t lef tech.lef'",
                                "api: chip.set('pdk','aprtech','openroad','M10','12t','lef','tech.lef')"
                            ],
                            "filehash": [],
                            "hashalgo": "sha256",
                            "help": "Technology file containing setup information needed to enable DRC clean APR for the specified stackup, libarch, and format. The 'libarch' specifies the library architecture (e.g. library height). For example a PDK with support for 9 and 12 track libraries might have 'libarchs' called 9t and 12t. The standard filetype for specifying place and route design rules for a process node is through a 'lef' format technology file. The 'filetype' used in the aprtech is used by the tool specific APR TCL scripts to set up the technology parameters. Some tools may require additional files beyond the tech.lef file. Examples of extra file types include antenna, tracks, tapcell, viarules, em.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK APR technology files",
                            "signature": [],
                            "switch": "-pdk_aprtech 'tool stackup libarch filetype <file>'",
                            "type": "[file]",
                            "value": []
                        }
                    }
                }
            }
        },
        "d0": {
            "defvalue": null,
            "example": [
                "cli: -pdk_d0 0.1",
                "api:  chip.set('pdk', 'd0', 0.1)"
            ],
            "help": "Process defect density (d0) expressed as random defects per cm^2. The value is used to calculate yield losses as a function of area, which in turn affects the chip full factory costs. Two yield models are supported: Poisson (default), and Murphy. The Poisson based yield is calculated as dy = exp(-area * d0/100). The Murphy based yield is calculated as dy = ((1-exp(-area * d0/100))/(area * d0/100))^2.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK process defect density",
            "signature": null,
            "switch": "-pdk_d0 <float>",
            "type": "float",
            "value": null
        },
        "density": {
            "defvalue": null,
            "example": [
                "cli: -pdk_density 100e6",
                "api:  chip.set('pdk', 'density', 10e6)"
            ],
            "help": "Approximate logic density expressed as # transistors / mm^2 calculated as: 0.6 * (Nand2 Transistor Count) / (Nand2 Cell Area) + 0.4 * (Register Transistor Count) / (Register Cell Area) The value is specified for a fixed standard cell library within a node and will differ depending on the library vendor, library track height and library type. The value can be used to to normalize the effective density reported for the design across different process nodes. The value can be derived from a variety of sources, including the PDK DRM, library LEFs, conference presentations, and public analysis.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK transistor density",
            "signature": null,
            "switch": "-pdk_density <float>",
            "type": "float",
            "value": null
        },
        "devmodel": {
            "default": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_devmodel 'xyce spice M10 asap7.sp'",
                            "api: chip.set('pdk','devmodel','xyce','spice','M10','asap7.sp')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "List of filepaths to PDK device models for different simulation purposes and for different tools. Examples of device model types include spice, aging, electromigration, radiation. An example of a 'spice' tool is xyce. Device models are specified on a per metal stack basis. Process nodes with a single device model across all stacks will have a unique parameter record per metal stack pointing to the same device model file.  Device types and tools are dynamic entries that depend on the tool setup and device technology. Pseud-standardized device types include spice, em (electromigration), and aging.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK device models",
                        "signature": [],
                        "switch": "-pdk_devmodel 'tool simtype stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "directory": {
            "default": {
                "default": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_directory 'xyce rfmodel M10 rftechdir'",
                            "api: chip.set('pdk','directory','xyce','rfmodel','M10','rftechdir')"
                        ],
                        "help": "List of named directories specified on a per tool and per stackup basis. The parameter should only be used for specifying files that are not directly  supported by the SiliconCompiler PDK schema.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK named directory",
                        "signature": [],
                        "switch": "-pdk_directory 'tool key stackup <file>'",
                        "type": "[dir]",
                        "value": []
                    }
                }
            }
        },
        "display": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -pdk_display 'klayout M10 display.lyt'",
                        "api: chip.set('pdk','display','klayout','M10','display.cfg')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Display configuration files describing colors and pattern schemes for all layers in the PDK. The display configuration file is entered on a stackup and tool basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK display file",
                    "signature": [],
                    "switch": "-pdk_display 'tool stackup <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "doc": {
            "datasheet": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_datasheet datasheet.pdf",
                    "api: chip.set('pdk','doc',datasheet,'datasheet.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to datasheet document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK datasheet",
                "signature": [],
                "switch": "-pdk_doc_datasheet <file>",
                "type": "[file]",
                "value": []
            },
            "homepage": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_homepage 'index.html",
                    "api: chip.set('pdk','doc','homepage','index.html')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to PDK docs homepage. Modern PDKs can include tens or hundreds of individual documents. A single html entry point can be used to present an organized documentation dashboard to the designer.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK documentation homepage",
                "signature": [],
                "switch": "-pdk_doc_homepage <file>",
                "type": "[file]",
                "value": []
            },
            "install": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_install install.pdf",
                    "api: chip.set('pdk','doc',install,'install.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to install document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK install",
                "signature": [],
                "switch": "-pdk_doc_install <file>",
                "type": "[file]",
                "value": []
            },
            "quickstart": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_quickstart quickstart.pdf",
                    "api: chip.set('pdk','doc',quickstart,'quickstart.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to quickstart document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK quickstart",
                "signature": [],
                "switch": "-pdk_doc_quickstart <file>",
                "type": "[file]",
                "value": []
            },
            "reference": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_reference reference.pdf",
                    "api: chip.set('pdk','doc',reference,'reference.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to reference document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK reference",
                "signature": [],
                "switch": "-pdk_doc_reference <file>",
                "type": "[file]",
                "value": []
            },
            "releasenotes": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_releasenotes releasenotes.pdf",
                    "api: chip.set('pdk','doc',releasenotes,'releasenotes.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to releasenotes document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK releasenotes",
                "signature": [],
                "switch": "-pdk_doc_releasenotes <file>",
                "type": "[file]",
                "value": []
            },
            "tutorial": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_tutorial tutorial.pdf",
                    "api: chip.set('pdk','doc',tutorial,'tutorial.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to tutorial document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK tutorial",
                "signature": [],
                "switch": "-pdk_doc_tutorial <file>",
                "type": "[file]",
                "value": []
            },
            "userguide": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_userguide userguide.pdf",
                    "api: chip.set('pdk','doc',userguide,'userguide.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to userguide document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK userguide",
                "signature": [],
                "switch": "-pdk_doc_userguide <file>",
                "type": "[file]",
                "value": []
            }
        },
        "drc": {
            "runset": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_drc_runset 'magic M10 $PDK/drc.rs'",
                            "api: chip.set('pdk','drc','runset','magic','M10','$PDK/drc.rs')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Runset files for DRC verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK DRC runset files",
                        "signature": [],
                        "switch": "-pdk_drc_runset 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "waiver": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_drc_waiver 'magic M10 $PDK/drc.txt'",
                            "api: chip.set('pdk','drc','waiver','magic','M10','$PDK/drc.txt')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Waiver files for DRC verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK DRC waiver files",
                        "signature": [],
                        "switch": "-pdk_drc_waiver 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "edgemargin": {
            "defvalue": null,
            "example": [
                "cli: -pdk_edgemargin 1",
                "api:  chip.set('pdk', 'edgemargin', 1)"
            ],
            "help": "Keep-out distance/margin from the wafer edge inwards specified in mm. The wafer edge is prone to chipping and need special treatment that preclude placement of designs in this area. The edge value is used to calculate effective dies per wafer and full factory cost.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK wafer edge keep-out margin",
            "signature": null,
            "switch": "-pdk_edgemargin <float>",
            "type": "float",
            "value": null
        },
        "erc": {
            "runset": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_erc_runset 'magic M10 $PDK/erc.rs'",
                            "api: chip.set('pdk','erc','runset','magic','M10','$PDK/erc.rs')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Runset files for ERC verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK ERC runset files",
                        "signature": [],
                        "switch": "-pdk_erc_runset 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "waiver": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_erc_waiver 'magic M10 $PDK/erc.txt'",
                            "api: chip.set('pdk','erc','waiver','magic','M10','$PDK/erc.txt')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Waiver files for ERC verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK ERC waiver files",
                        "signature": [],
                        "switch": "-pdk_erc_waiver 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "file": {
            "default": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_file 'xyce spice M10 asap7.sp'",
                            "api: chip.set('pdk','file','xyce','spice','M10','asap7.sp')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "List of named files specified on a per tool and per stackup basis. The parameter should only be used for specifying files that are not directly  supported by the SiliconCompiler PDK schema.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK named file",
                        "signature": [],
                        "switch": "-pdk_file 'tool key stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "foundry": {
            "defvalue": null,
            "example": [
                "cli: -pdk_foundry virtual",
                "api:  chip.set('pdk', 'foundry', 'virtual')"
            ],
            "help": "Name of foundry corporation. Examples include intel, gf, tsmc, samsung, skywater, virtual. The 'virtual' keyword is reserved for simulated non-manufacturable processes.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "PDK foundry name",
            "signature": null,
            "switch": "-pdk_foundry <str>",
            "type": "str",
            "value": null
        },
        "grid": {
            "default": {
                "default": {
                    "adj": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_adj 'M10 m2 0.5'",
                            "api: chip.set('pdk','grid','M10','m2','adj','0.5')"
                        ],
                        "help": "Defines the routing resources adjustments for the design on a per layer basis. The value is expressed as a fraction from 0 to 1. A value of 0.5 reduces the routing resources by 50%. If not defined, 100% routing resource utilization is permitted.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid resource adjustment",
                        "signature": null,
                        "switch": "-pdk_grid_adj 'stackup layer <float>'",
                        "type": "float",
                        "value": null
                    },
                    "cap": {
                        "default": {
                            "defvalue": null,
                            "example": [
                                "cli: -pdk_grid_cap 'M10 m2 fast 0.2'",
                                "api: chip.set('pdk','grid','M10','m2','cap','fast','0.2')"
                            ],
                            "help": "Unit capacitance of a wire defined by the grid width and spacing values in the 'grid' structure. The value is specified as ff/um on a per stackup, metal, and corner basis. As a rough rule of thumb, this value tends to stay around 0.2ff/um. This number should only be used for reality confirmation. Accurate analysis should use the PEX models.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK routing grid unit capacitance",
                            "signature": null,
                            "switch": "-pdk_grid_cap 'stackup layer corner <float>''",
                            "type": "float",
                            "value": null
                        }
                    },
                    "dir": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_dir 'M10 m1 horizontal'",
                            "api: chip.set('pdk','grid','M10','m1','dir','horizontal')"
                        ],
                        "help": "Preferred routing direction specified on a per stackup and per metal basis. Valid routing directions are horizontal and vertical.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid preferred direction",
                        "signature": null,
                        "switch": "-pdk_grid_dir 'stackup layer <str>'",
                        "type": "str",
                        "value": null
                    },
                    "name": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_name 'M10 metal1 m1'",
                            "api: chip.set('pdk','grid','M10','metal1','name','m1')"
                        ],
                        "help": "Maps PDK metal names to the SC standardized layer stack starting with m1 as the lowest routing layer and ending with m<n> as the highest routing layer. The map is specified on a per metal stack basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid name map",
                        "signature": null,
                        "switch": "-pdk_grid_name 'stackup layer <str>'",
                        "type": "str",
                        "value": null
                    },
                    "res": {
                        "default": {
                            "defvalue": null,
                            "example": [
                                "cli: -pdk_grid_res 'M10 m2 fast 0.2'",
                                "api: chip.set('pdk','grid','M10','m2','res','fast','0.2')"
                            ],
                            "help": "Resistance of a wire defined by the grid width and spacing values in the 'grid' structure.  The value is specified as ohms/um on a per stackup, metal, and corner basis. The parameter is only meant to be used as a sanity check and for coarse design planning. Accurate analysis should use the TCAD PEX models.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK routing grid unit resistance",
                            "signature": null,
                            "switch": "-pdk_grid_res 'stackup layer corner <float>''",
                            "type": "float",
                            "value": null
                        }
                    },
                    "tcr": {
                        "default": {
                            "defvalue": null,
                            "example": [
                                "cli: -pdk_grid_tcr 'M10 m2 fast 0.2'",
                                "api: chip.set('pdk','grid','M10','m2','tcr','fast','0.2')"
                            ],
                            "help": "Temperature coefficient of resistance of the wire defined by the grid width and spacing values in the 'grid' structure. The value is specified in %/ deg C on a per stackup, layer, and corner basis. The number is only meant to be used as a sanity check and for coarse design planning. Accurate analysis should use the PEX models.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK routing grid temperature coefficient",
                            "signature": null,
                            "switch": "-pdk_grid_tcr 'stackup layer corner <float>'",
                            "type": "float",
                            "value": null
                        }
                    },
                    "xoffset": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_xoffset 'M10 m2 0.5'",
                            "api: chip.set('pdk','grid','M10','m2','xoffset','0.5')"
                        ],
                        "help": "Defines the grid offset of a vertical metal layer specified on a per stackup and per metal basis, specified in um.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid vertical wire offset",
                        "signature": null,
                        "switch": "-pdk_grid_xoffset 'stackup layer <float>'",
                        "type": "float",
                        "value": null
                    },
                    "xpitch": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_xpitch 'M10 m1 0.5'",
                            "api: chip.set('pdk','grid','M10','m1','xpitch','0.5')"
                        ],
                        "help": "Defines the routing pitch for vertical wires on a per stackup and per metal basis, specified in um.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid vertical wire pitch",
                        "signature": null,
                        "switch": "-pdk_grid_xpitch 'stackup layer <float>'",
                        "type": "float",
                        "value": null
                    },
                    "yoffset": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_yoffset 'M10 m2 0.5'",
                            "api: chip.set('pdk','grid','M10','m2','yoffset','0.5')"
                        ],
                        "help": "Defines the grid offset of a horizontal metal layer specified on a per stackup and per metal basis, specified in um.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid horizontal wire offset",
                        "signature": null,
                        "switch": "-pdk_grid_yoffset 'stackup layer <float>'",
                        "type": "float",
                        "value": null
                    },
                    "ypitch": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_ypitch 'M10 m1 0.5'",
                            "api: chip.set('pdk','grid','M10','m1','ypitch','0.5')"
                        ],
                        "help": "Defines the routing pitch for horizontal wires on a per stackup and per metal basis, specified in um.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid horizontal wire pitch",
                        "signature": null,
                        "switch": "-pdk_grid_ypitch 'stackup layer <float>'",
                        "type": "float",
                        "value": null
                    }
                }
            }
        },
        "hscribe": {
            "defvalue": null,
            "example": [
                "cli: -pdk_hscribe 0.1",
                "api:  chip.set('pdk', 'hscribe', 0.1)"
            ],
            "help": "Width of the horizontal scribe line (in mm) used during die separation. The process is generally completed using a mechanical saw, but can be done through combinations of mechanical saws, lasers, wafer thinning, and chemical etching in more advanced technologies. The value is used to calculate effective dies per wafer and full factory cost.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK horizontal scribe line width",
            "signature": null,
            "switch": "-pdk_hscribe <float>",
            "type": "float",
            "value": null
        },
        "layermap": {
            "default": {
                "default": {
                    "default": {
                        "default": {
                            "author": [],
                            "copy": "false",
                            "date": [],
                            "defvalue": [],
                            "example": [
                                "cli: -pdk_layermap 'klayout db gds M10 asap7.map'",
                                "api: chip.set('pdk','layermap','klayout','db','gds','M10','asap7.map')"
                            ],
                            "filehash": [],
                            "hashalgo": "sha256",
                            "help": "Files describing input/output mapping for streaming layout data from one format to another. A foundry PDK will include an official layer list for all user entered and generated layers supported in the GDS accepted by the foundry for processing, but there is no standardized layer definition format that can be read and written by all EDA tools. To ensure mask layer matching, key/value type mapping files are needed to convert EDA databases to/from GDS and to convert between different types of EDA databases. Layer maps are specified on a per metal stackup basis. The 'src' and 'dst' can be names of SC supported tools or file formats (like 'gds').",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK layer map file",
                            "signature": [],
                            "switch": "-pdk_layermap 'tool src dst stackup <file>'",
                            "type": "[file]",
                            "value": []
                        }
                    }
                }
            }
        },
        "lvs": {
            "runset": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_lvs_runset 'magic M10 $PDK/lvs.rs'",
                            "api: chip.set('pdk','lvs','runset','magic','M10','$PDK/lvs.rs')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Runset files for LVS verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK LVS runset files",
                        "signature": [],
                        "switch": "-pdk_lvs_runset 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "waiver": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_lvs_waiver 'magic M10 $PDK/lvs.txt'",
                            "api: chip.set('pdk','lvs','waiver','magic','M10','$PDK/lvs.txt')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Waiver files for LVS verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK LVS waiver files",
                        "signature": [],
                        "switch": "-pdk_lvs_waiver 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "node": {
            "defvalue": null,
            "example": [
                "cli: -pdk_node 130",
                "api:  chip.set('pdk', 'node', 130)"
            ],
            "help": "Approximate relative minimum dimension of the process target specified in nanometers. The parameter is required for flows and tools that leverage the value to drive technology dependent synthesis and APR optimization. Node examples include 180, 130, 90, 65, 45, 32, 22 14, 10, 7, 5, 3.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "PDK process node",
            "signature": null,
            "switch": "-pdk_node <float>",
            "type": "float",
            "value": null
        },
        "pexmodel": {
            "default": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_pexmodel 'fastcap M10 max wire.mod'",
                            "api: chip.set('pdk','pexmodel','fastcap','M10','max','wire.mod')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "List of filepaths to PDK wire TCAD models used during automated synthesis, APR, and signoff verification. Pexmodels are specified on a per metal stack basis. Corner values depend on the process being used, but typically include nomenclature such as min, max, nominal. For exact names, refer to the DRM. Pexmodels are generally not standardized and specified on a per tool basis. An example of pexmodel type is 'fastcap'.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK parasitic TCAD models",
                        "signature": [],
                        "switch": "-pdk_pexmodel 'tool stackup corner <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "process": {
            "defvalue": null,
            "example": [
                "cli: -pdk_process asap7",
                "api:  chip.set('pdk', 'process', 'asap7')"
            ],
            "help": "Public name of the foundry process. The string is case insensitive and must match the public process name exactly. Examples of virtual processes include freepdk45 and asap7.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "PDK process name",
            "signature": null,
            "switch": "-pdk_process <str>",
            "type": "str",
            "value": null
        },
        "sramsize": {
            "defvalue": null,
            "example": [
                "cli: -pdk_sramsize 0.032",
                "api:  chip.set('pdk', 'sramsize', '0.026')"
            ],
            "help": "Area of an SRAM bitcell expressed in um^2. The value can be derived from a variety of sources, including the PDK DRM, library LEFs, conference presentations, and public analysis. The number is a good first order indicator of SRAM density for large memory arrays where the bitcell dominates the array I/O logic.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK SRAM bitcell size",
            "signature": null,
            "switch": "-pdk_sramsize <float>",
            "type": "float",
            "value": null
        },
        "stackup": {
            "defvalue": [],
            "example": [
                "cli: -pdk_stackup 2MA4MB2MC",
                "api: chip.add('pdk','stackup','2MA4MB2MC')"
            ],
            "help": "List of all metal stackups offered in the process node. Older process nodes may only offer a single metal stackup, while advanced nodes offer a large but finite list of metal stacks with varying combinations of metal line pitches and thicknesses. Stackup naming is unique to a foundry, but is generally a long string or code. For example, a 10 metal stackup with two 1x wide, four 2x wide, and 4x wide metals, might be identified as 2MA4MB2MC, where MA, MB, and MC denote wiring layers with different properties (thickness, width, space). Each stackup will come with its own set of routing technology files and parasitic models specified in the pdk_pexmodel and pdk_aprtech parameters.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "PDK metal stackups",
            "signature": [],
            "switch": "-pdk_stackup <str>",
            "type": "[str]",
            "value": []
        },
        "variable": {
            "default": {
                "default": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_variable 'xyce modeltype M10 bsim4'",
                            "api: chip.set('pdk','variable','xyce','modeltype','M10','bsim4')"
                        ],
                        "help": "List of key/value strings specified on a per tool and per stackup basis. The parameter should only be used for specifying variables that are not directly  supported by the SiliconCompiler PDK schema.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK named variable",
                        "signature": [],
                        "switch": "-pdk_variable 'tool stackup key <str>'",
                        "type": "[str]",
                        "value": []
                    }
                }
            }
        },
        "version": {
            "defvalue": null,
            "example": [
                "cli: -pdk_version 1.0",
                "api:  chip.set('pdk', 'version', '1.0')"
            ],
            "help": "Alphanumeric string specifying the version of the PDK. Verification of correct PDK and IP versions is a hard ASIC tapeout require in all commercial foundries. The version number can be used for design manifest tracking and tapeout checklists.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK version number",
            "signature": null,
            "switch": "-pdk_version <str>",
            "type": "str",
            "value": null
        },
        "vscribe": {
            "defvalue": null,
            "example": [
                "cli: -pdk_vscribe 0.1",
                "api:  chip.set('pdk', 'vscribe', 0.1)"
            ],
            "help": "Width of the vertical scribe line (in mm) used during die separation. The process is generally completed using a mechanical saw, but can be done through combinations of mechanical saws, lasers, wafer thinning, and chemical etching in more advanced technologies. The value is used to calculate effective dies per wafer and full factory cost.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK vertical scribe line width",
            "signature": null,
            "switch": "-pdk_vscribe <float>",
            "type": "float",
            "value": null
        },
        "wafercost": {
            "defvalue": null,
            "example": [
                "cli: -pdk_wafercost 10000",
                "api:  chip.set('pdk', 'wafercost', 10000)"
            ],
            "help": "Raw cost per wafer purchased specified in USD, not accounting for yield loss. The values is used to calculate chip full factory costs.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK wafer cost",
            "signature": null,
            "switch": "-pdk_wafercost <float>",
            "type": "float",
            "value": null
        },
        "wafersize": {
            "defvalue": null,
            "example": [
                "cli: -pdk_wafersize 300",
                "api:  chip.set('pdk', 'wafersize', 300)"
            ],
            "help": "Wafer diameter used in manufacturing process specified in mm. The standard diameter for leading edge manufacturing is 300mm. For older process technologies and specialty fabs, smaller diameters such as 200, 100, 125, 100 are common. The value is used to calculate dies per wafer and full factory chip costs.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "PDK process node",
            "signature": null,
            "switch": "-pdk_wafersize <float>",
            "type": "float",
            "value": null
        }
    },
    "quiet": {
        "defvalue": "false",
        "example": [
            "cli: -quiet",
            "api: chip.set('quiet', True)"
        ],
        "help": "The -quiet option forces all steps to print to a log file. This can be useful with Modern EDA tools which print significant content to the screen.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Quiet execution",
        "signature": null,
        "switch": "-quiet <bool>",
        "type": "bool",
        "value": "false"
    },
    "read": {
        "def": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_def 'sta 0 mydesign.def'",
                        "api: chip.set('read','def','sta','0','mydesign.def')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in DEF specified on a per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Read DEF file",
                    "signature": [],
                    "switch": "-read_def 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "gds": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_gds 'sta 0 mydesign.gds'",
                        "api: chip.set('read','gds','sta','0','mydesign.gds')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in GDS specified on a per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Read GDS file",
                    "signature": [],
                    "switch": "-read_gds 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "gerber": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_gerber 'sta 0 mydesign.gerber'",
                        "api: chip.set('read','gerber','sta','0','mydesign.gerber')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in GERBER specified on a per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Read GERBER file",
                    "signature": [],
                    "switch": "-read_gerber 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "netlist": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_netlist 'sta 0 mydesign.netlist'",
                        "api: chip.set('read','netlist','sta','0','mydesign.netlist')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in NETLIST specified on a per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Read NETLIST file",
                    "signature": [],
                    "switch": "-read_netlist 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "pcf": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_pcf 'sta 0 mydesign.pcf'",
                        "api: chip.set('read','pcf','sta','0','mydesign.pcf')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in PCF specified on a per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Read PCF file",
                    "signature": [],
                    "switch": "-read_pcf 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "saif": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_saif 'sta 0 mydesign.saif'",
                        "api: chip.set('read','saif','sta','0','mydesign.saif')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in SAIF specified on a per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Read SAIF file",
                    "signature": [],
                    "switch": "-read_saif 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "sdc": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_sdc 'sta 0 mydesign.sdc'",
                        "api: chip.set('read','sdc','sta','0','mydesign.sdc')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in SDC specified on a per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Read SDC file",
                    "signature": [],
                    "switch": "-read_sdc 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "sdf": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_sdf 'sta 0 mydesign.sdf'",
                        "api: chip.set('read','sdf','sta','0','mydesign.sdf')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in SDF specified on a per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Read SDF file",
                    "signature": [],
                    "switch": "-read_sdf 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "spef": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_spef 'sta 0 mydesign.spef'",
                        "api: chip.set('read','spef','sta','0','mydesign.spef')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in SPEF specified on a per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Read SPEF file",
                    "signature": [],
                    "switch": "-read_spef 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "vcd": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_vcd 'sta 0 mydesign.vcd'",
                        "api: chip.set('read','vcd','sta','0','mydesign.vcd')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in VCD specified on a per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Read VCD file",
                    "signature": [],
                    "switch": "-read_vcd 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        }
    },
    "record": {
        "default": {
            "default": {
                "arch": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_arch 'dfm 0 <x86_64>'",
                        "api: chip.set('record','dfm','0','arch', <x86_64>)"
                    ],
                    "help": "Record tracking the hardware architecture per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: hardware architecture",
                    "signature": null,
                    "switch": "-record_arch 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "distro": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_distro 'dfm 0 <ubuntu>'",
                        "api: chip.set('record','dfm','0','distro', <ubuntu>)"
                    ],
                    "help": "Record tracking the distro name per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: distro name",
                    "signature": null,
                    "switch": "-record_distro 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "endtime": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_endtime 'dfm 0 <2021-09-06 12:20:20>'",
                        "api: chip.set('record','dfm','0','endtime', <2021-09-06 12:20:20>)"
                    ],
                    "help": "Record tracking the end time per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: end time",
                    "signature": null,
                    "switch": "-record_endtime 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "ipaddr": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_ipaddr 'dfm 0 <<addr>>'",
                        "api: chip.set('record','dfm','0','ipaddr', <<addr>>)"
                    ],
                    "help": "Record tracking the IP address per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: IP address",
                    "signature": null,
                    "switch": "-record_ipaddr 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "kernelversion": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_kernelversion 'dfm 0 <5.11.0-34-generic>'",
                        "api: chip.set('record','dfm','0','kernelversion', <5.11.0-34-generic>)"
                    ],
                    "help": "Record tracking the O/S kernel version per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: O/S kernel version",
                    "signature": null,
                    "switch": "-record_kernelversion 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "macaddr": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_macaddr 'dfm 0 <<addr>>'",
                        "api: chip.set('record','dfm','0','macaddr', <<addr>>)"
                    ],
                    "help": "Record tracking the MAC address per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: MAC address",
                    "signature": null,
                    "switch": "-record_macaddr 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "machine": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_machine 'dfm 0 <carbon>'",
                        "api: chip.set('record','dfm','0','machine', <carbon>)"
                    ],
                    "help": "Record tracking the machine name per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: machine name",
                    "signature": null,
                    "switch": "-record_machine 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "osversion": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_osversion 'dfm 0 <20.04.1-Ubuntu>'",
                        "api: chip.set('record','dfm','0','osversion', <20.04.1-Ubuntu>)"
                    ],
                    "help": "Record tracking the O/S version per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: O/S version",
                    "signature": null,
                    "switch": "-record_osversion 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "platform": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_platform 'dfm 0 <linux>'",
                        "api: chip.set('record','dfm','0','platform', <linux>)"
                    ],
                    "help": "Record tracking the platform name per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: platform name",
                    "signature": null,
                    "switch": "-record_platform 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "publickey": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_publickey 'dfm 0 <<key>>'",
                        "api: chip.set('record','dfm','0','publickey', <<key>>)"
                    ],
                    "help": "Record tracking the public key per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: public key",
                    "signature": null,
                    "switch": "-record_publickey 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "region": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_region 'dfm 0 <US Gov Boston>'",
                        "api: chip.set('record','dfm','0','region', <US Gov Boston>)"
                    ],
                    "help": "Record tracking the cloud region per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: cloud region",
                    "signature": null,
                    "switch": "-record_region 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "starttime": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_starttime 'dfm 0 <2021-09-06 12:20:20>'",
                        "api: chip.set('record','dfm','0','starttime', <2021-09-06 12:20:20>)"
                    ],
                    "help": "Record tracking the start time per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: start time",
                    "signature": null,
                    "switch": "-record_starttime 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "toolversion": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_toolversion 'dfm 0 <1.0>'",
                        "api: chip.set('record','dfm','0','toolversion', <1.0>)"
                    ],
                    "help": "Record tracking the tool version per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: tool version",
                    "signature": null,
                    "switch": "-record_toolversion 'step index group <str>'",
                    "type": "str",
                    "value": null
                },
                "userid": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_userid 'dfm 0 <wiley>'",
                        "api: chip.set('record','dfm','0','userid', <wiley>)"
                    ],
                    "help": "Record tracking the userid per step and index basis. val[1]",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: userid",
                    "signature": null,
                    "switch": "-record_userid 'step index group <str>'",
                    "type": "str",
                    "value": null
                }
            }
        }
    },
    "relax": {
        "defvalue": "false",
        "example": [
            "cli: -relax",
            "api: chip.set('relax', 'true')"
        ],
        "help": "Specifies that tools should be lenient and suppress some warnings that may or may not indicate design issues.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Relax RTL linting",
        "signature": null,
        "switch": "-relax <bool>",
        "type": "bool",
        "value": "false"
    },
    "remote": {
        "defvalue": "false",
        "example": [
            "cli: -remote",
            "api: chip.set('remote', True)"
        ],
        "help": "Sends job for remote processing if set to true. The remote option requires a credentials file to be placed in the home directory. Fore more information, see the credentials parameter.",
        "lock": "false",
        "require": "all",
        "scope": "global",
        "shorthelp": "Enable remote processing",
        "signature": null,
        "switch": "-remote <bool>'",
        "type": "bool",
        "value": "false"
    },
    "scpath": {
        "defvalue": [],
        "example": [
            "cli: -scpath '/home/$USER/sclib'",
            "api: chip.set('scpath', '/home/$USER/sclib')"
        ],
        "help": "Specifies python modules paths for target import.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Search path",
        "signature": [],
        "switch": "-scpath <dir>",
        "type": "[dir]",
        "value": []
    },
    "show": {
        "defvalue": "false",
        "example": [
            "cli: -show",
            "api: chip.set('show', 'true')"
        ],
        "help": "Specifies that the final hardware layout should be shown after the compilation has been completed. The final layout and tool used to display the layout is flow dependent.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Show layout",
        "signature": null,
        "switch": "-show <bool>",
        "type": "bool",
        "value": "false"
    },
    "showtool": {
        "default": {
            "defvalue": null,
            "example": [
                "cli: -showtool 'gds klayout'",
                "api: chip.set('showtool', 'gds', 'klayout')"
            ],
            "help": "Selects the tool to use by the show function for displaying the specified filetype.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "Select data display tool",
            "signature": null,
            "switch": "-showtool 'filetype <tool>'",
            "type": "str",
            "value": null
        }
    },
    "skipall": {
        "defvalue": "false",
        "example": [
            "cli: -skipall",
            "api: chip.set('skipall', 'true')"
        ],
        "help": "Skips the execution of all tools in run(), enabling a quick check of tool and setup without having to run through each step of a flow to completion.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Skip all tasks",
        "signature": null,
        "switch": "-skipall <bool>",
        "type": "bool",
        "value": "false"
    },
    "skipcheck": {
        "defvalue": "false",
        "example": [
            "cli: -skipcheck",
            "api: chip.set('skipcheck', True)"
        ],
        "help": "Bypasses the strict runtime manifest check. Can be used for accelerating initial bringup of tool/flow/pdk/libs targets. The flag should not be used for production compilation.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Skip manifest check",
        "signature": null,
        "switch": "-skipcheck <bool>",
        "type": "bool",
        "value": "false"
    },
    "skipstep": {
        "defvalue": [],
        "example": [
            "cli: -skipstep lvs",
            "api: chip.set('skipstep', 'lvs')"
        ],
        "help": "List of steps to skip during execution.The default is to execute all steps  defined in the flow graph.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Skip step list",
        "signature": [],
        "switch": "-skipstep <str>",
        "type": "[str]",
        "value": []
    },
    "source": {
        "author": [],
        "copy": "true",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: hello_world.v",
            "api: chip.set('source', 'hello_world.v')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "A list of source files to read in for elaboration. The files are read in order from first to last entered. File type is inferred from the file suffix. (\\*.v, \\*.vh) = Verilog (\\*.vhd)       = VHDL (\\*.sv)        = SystemVerilog (\\*.c)         = C (\\*.cpp, .cc)  = C++ (\\*.py)        = Python",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design source files",
        "signature": [],
        "switch": null,
        "type": "[file]",
        "value": []
    },
    "steplist": {
        "defvalue": [],
        "example": [
            "cli: -steplist 'import'",
            "api: chip.set('steplist','import')"
        ],
        "help": "List of steps to execute. The default is to execute all steps defined in the flow graph.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Compilation step list",
        "signature": [],
        "switch": "-steplist <step>",
        "type": "[str]",
        "value": []
    },
    "supply": {
        "default": {
            "level": {
                "defvalue": null,
                "example": [
                    "cli: -supply_level 'vdd 1.0'",
                    "api: chip.set('supply','vdd','level','1.0')"
                ],
                "help": "Voltage level for the name supply, specified in Volts.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Supply level",
                "signature": null,
                "switch": "-supply_level 'supplyname <float>'",
                "type": "float",
                "value": null
            },
            "noise": {
                "defvalue": null,
                "example": [
                    "cli: -supply_noise 'vdd 1.0'",
                    "api: chip.set('supply','vdd','noise','1.0')"
                ],
                "help": "Voltage noise for the name supply, specified in Volts.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Supply noise",
                "signature": null,
                "switch": "-supply_noise 'supplyname <float>'",
                "type": "float",
                "value": null
            },
            "pin": {
                "defvalue": null,
                "example": [
                    "cli: -supply_pin 'vdd vdd_0'",
                    "api: chip.set('supply','vdd','pin','vdd_0')"
                ],
                "help": "Defines a supply name alias to assign to a power source. A power supply source can be a list of block pins or a regulator output pin.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Supply pin mapping",
                "signature": null,
                "switch": "-supply_pin 'supplyname <str>'",
                "type": "str",
                "value": null
            }
        }
    },
    "target": {
        "defvalue": null,
        "example": [
            "cli: -target freepdk45_demo",
            "api: chip.set('target','freepdk45_demo')"
        ],
        "help": "Sets a target module to be used for compilation. The target module must set up all paramaters needed. The target module may load multiple flows and libraries.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Compilation target",
        "signature": null,
        "switch": "-target <str>",
        "type": "str",
        "value": null
    },
    "techarg": {
        "default": {
            "defvalue": [],
            "example": [
                "cli: -techarg 'mimcap true",
                "api: chip.set('techarg','mimcap', 'true')"
            ],
            "help": "Parameter passed in as key/value pair to the technology target referenced in the load_pdk() API call. See the target technology for specific guidelines regarding configuration parameters.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "Target technology argument",
            "signature": [],
            "switch": "-techarg 'arg <str>",
            "type": "[str]",
            "value": []
        }
    },
    "testbench": {
        "author": [],
        "copy": "true",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -testbench tb_top.v",
            "api: chip.set('testbench', 'tb_top.v')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "A list of testbench sources. The files are read in order from first to last entered. File type is inferred from the file suffix: (\\*.v, \\*.vh) = Verilog (\\*.vhd)      = VHDL (\\*.sv)       = SystemVerilog (\\*.c)        = C (\\*.cpp, .cc) = C++ (\\*.py)       = Python",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Testbench files",
        "signature": [],
        "switch": "-testbench <file>",
        "type": "[file]",
        "value": []
    },
    "testmodule": {
        "defvalue": null,
        "example": [
            "cli: -testmodule top",
            "api: chip.set('testmodule', 'top')"
        ],
        "help": "Name of the top level test module.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Testbench top module",
        "signature": null,
        "switch": "-testmodule <str>",
        "type": "str",
        "value": null
    },
    "trace": {
        "defvalue": "false",
        "example": [
            "cli: -trace",
            "api: chip.set('trace', True)"
        ],
        "help": "Enables debug tracing during compilation and/or runtime.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Enable debug traces",
        "signature": null,
        "switch": "-trace <bool>",
        "type": "bool",
        "value": "false"
    },
    "track": {
        "defvalue": "false",
        "example": [
            "cli: -track",
            "api: chip.set('track', 'true')"
        ],
        "help": "Turns on tracking of all 'record' parameters during each task. Tracking will result in potentially sensitive data being recorded in the manifest so only turn on this feature if you have control of the final manifest.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Enable provenance tracking",
        "signature": null,
        "switch": "-track <bool>",
        "type": "bool",
        "value": "false"
    },
    "unit": {
        "capacitance": {
            "defvalue": "pf",
            "example": [
                "cli: -unit_capacitance 'pf'",
                "api: chip.set('unit','capacitance',pf)"
            ],
            "help": "Units used for capacitance when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for capacitance",
            "signature": null,
            "switch": "-record_capacitance '<str>'",
            "type": "str",
            "value": "pf"
        },
        "current": {
            "defvalue": "ma",
            "example": [
                "cli: -unit_current 'ma'",
                "api: chip.set('unit','current',ma)"
            ],
            "help": "Units used for current when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for current",
            "signature": null,
            "switch": "-record_current '<str>'",
            "type": "str",
            "value": "ma"
        },
        "inducatance": {
            "defvalue": "nh",
            "example": [
                "cli: -unit_inducatance 'nh'",
                "api: chip.set('unit','inducatance',nh)"
            ],
            "help": "Units used for inducatance when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for inducatance",
            "signature": null,
            "switch": "-record_inducatance '<str>'",
            "type": "str",
            "value": "nh"
        },
        "power": {
            "defvalue": "mw",
            "example": [
                "cli: -unit_power 'mw'",
                "api: chip.set('unit','power',mw)"
            ],
            "help": "Units used for power when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for power",
            "signature": null,
            "switch": "-record_power '<str>'",
            "type": "str",
            "value": "mw"
        },
        "resistance": {
            "defvalue": "ohm",
            "example": [
                "cli: -unit_resistance 'ohm'",
                "api: chip.set('unit','resistance',ohm)"
            ],
            "help": "Units used for resistance when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for resistance",
            "signature": null,
            "switch": "-record_resistance '<str>'",
            "type": "str",
            "value": "ohm"
        },
        "time": {
            "defvalue": "ns",
            "example": [
                "cli: -unit_time 'ns'",
                "api: chip.set('unit','time',ns)"
            ],
            "help": "Units used for time when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for time",
            "signature": null,
            "switch": "-record_time '<str>'",
            "type": "str",
            "value": "ns"
        },
        "voltage": {
            "defvalue": "mv",
            "example": [
                "cli: -unit_voltage 'mv'",
                "api: chip.set('unit','voltage',mv)"
            ],
            "help": "Units used for voltage when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for voltage",
            "signature": null,
            "switch": "-record_voltage '<str>'",
            "type": "str",
            "value": "mv"
        }
    },
    "vercheck": {
        "defvalue": "false",
        "example": [
            "cli: -vercheck",
            "api: chip.set('vercheck', 'true')"
        ],
        "help": "Enforces strict version checking on all invoked tools if True. The list of supported version numbers is defined in the 'version' parameter in the 'eda' dictionary for each tool.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Enable version checking",
        "signature": null,
        "switch": "-vercheck <bool>",
        "type": "bool",
        "value": "false"
    },
    "version": {
        "print": {
            "defvalue": "false",
            "example": [
                "cli: -version",
                "api: chip.get('version', 'print')"
            ],
            "help": "Command line switch to print the schema and software version numbers in an 'sc' command line app.",
            "lock": "false",
            "require": "all",
            "scope": "global",
            "shorthelp": "Prints version number",
            "signature": null,
            "switch": "-version <bool>",
            "type": "bool",
            "value": "false"
        },
        "schema": {
            "defvalue": "0.8.0",
            "example": [
                "cli: -version_schema",
                "api: chip.get('version', 'schema')"
            ],
            "help": "SiliconCompiler schema version number.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Schema version number",
            "signature": null,
            "switch": "-version_schema <str>",
            "type": "str",
            "value": "0.8.0"
        },
        "software": {
            "defvalue": null,
            "example": [
                "cli: -version_software",
                "api: chip.get('version', 'software')"
            ],
            "help": "SiliconCompiler software version number.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Software version number",
            "signature": null,
            "switch": "-version_software <str>",
            "type": "str",
            "value": null
        }
    },
    "vlib": {
        "author": [],
        "copy": "false",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -v './mylib.v'",
            "api: chip.set('vlib','./mylib.v')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "List of library files to be read in. Modules found in the libraries are not interpreted as root modules.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design libraries",
        "signature": [],
        "switch": "-v <file>",
        "type": "[file]",
        "value": []
    },
    "waveform": {
        "author": [],
        "copy": "false",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -waveform mytrace.vcd",
            "api: chip.set('waveform','mytrace.vcd')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "Waveform(s) used as a golden test vectors to ensure that compilation transformations do not modify the functional behavior of the source code. The waveform file must be compatible with the testbench and compilation flow tools.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Testbench golden waveforms",
        "signature": [],
        "switch": "-waveform <file>",
        "type": "[file]",
        "value": []
    },
    "ydir": {
        "defvalue": [],
        "example": [
            "cli: -y './mylib'",
            "api: chip.set('ydir','./mylib')"
        ],
        "help": "Search paths to look for verilog modules found in the the source list. The import engine will look for modules inside files with the specified +libext+ param suffix.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design module search paths",
        "signature": [],
        "switch": "-y <dir>",
        "type": "[dir]",
        "value": []
    }
}
