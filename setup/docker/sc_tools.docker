# Copyright (C) 2023 Zero ASIC

FROM ubuntu:20.04

LABEL org.opencontainers.image.source "https://github.com/siliconcompiler/siliconcompiler"
LABEL org.opencontainers.image.description="SiliconCompiler container with all supported OpenSource tools"

ARG SC_PREFIX=/sc_tools
ARG SC_BUILD=/sc_build

ARG DEBIAN_FRONTEND=noninteractive

# Ensure we only install the required tools to keep images small
RUN echo "APT::Install-Recommends \"false\";" >> /etc/apt/apt.conf
RUN echo "APT::Install-Suggests \"false\";" >> /etc/apt/apt.conf

# Install minimum tools needed by SC and support scripts
RUN apt-get update
RUN apt-get install -y curl wget \
                       git \
                       python3 python3-pip \
                       xvfb && \
    apt-get clean

{% for tool in tools %}
COPY --from={{ tool }} $SC_PREFIX $SC_PREFIX
RUN cat $SC_PREFIX/apt.txt >> $SC_PREFIX/apt_all.txt && \
    rm $SC_PREFIX/apt.txt
{% endfor %}

# Execute scripts needed by tools
RUN find $SC_PREFIX -name "*.sh" -maxdepth 1 -exec {} \; && \
    rm -f $SC_PREFIX/*.sh

RUN cat $SC_PREFIX/apt_all.txt | xargs apt-get install --ignore-missing -y && \
    apt-get clean
RUN rm $SC_PREFIX/apt_all.txt

# Install tools without build
RUN mkdir -p $SC_BUILD
WORKDIR $SC_BUILD

# Copy in support scripts
COPY _tools.py $SC_BUILD
COPY _tools.json $SC_BUILD

{% for tool in skip_tools %}
COPY install-{{ tool }}.sh $SC_BUILD
RUN chmod +x $SC_BUILD/install-{{ tool }}.sh && \
    $SC_BUILD/install-{{ tool }}.sh && \
    apt-get clean && \
    rm -rf $SC_BUILD/deps
{% endfor %}

# Cleanup builds
WORKDIR /
RUN rm -rf $SC_BUILD

# Setup work environment
RUN mkdir -p /sc_work
WORKDIR /sc_work

ENV PATH="$SC_PREFIX/bin:$PATH"

# headless options for GUI
ENV QT_QPA_PLATFORM="offscreen"
