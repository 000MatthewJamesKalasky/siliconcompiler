.. for github, vim: syntax=reStructuredText

=================================
Revision History and Change Log
=================================

The changes in each SiliconCompiler release version are described below. Commit
version shown in (). Where applicable, the contributors that suggested a given
feature are shown in [].

SiliconCompiler 0.9.1 (2022-06-14)
=========================================

**Major:**

* Added input filetype inference based on file extension (restores functionality lost in 0.9.0).
* Added manifest tree viewer to HTML report.
* Improved TCL manifest generation:

  * Fixed escaping of special characters and whitespace.
  * Fixed insertion of "$env" in filepaths.
  * Changed tuple printing to be TCL list instead of tuple-like string.

**Minor:**

* Schema: Added tool CLI arguments to ['record', ...] schema.
* Changed create_cmdline() switchlist parameter to accept switch names as specified on command line.
* Changed HTML report to be self-contained.
* Fixed CSV manifest generation.

SiliconCompiler 0.9.0 (2022-05-19)
=========================================

**Major:**

* Schema: Reorganized entire schema! Changes summarized below:

  * Cleaned and consolidated top-level organization, most parameters are now nested.
  * Moved build configuration options underneath ['option', ...].
  * Added ['output', ...] to store pointers to flow outputs.
  * Added ['model', ...] to store pointers to design abstractions (timing libraries, layouts, etc).
  * Added ['datasheet', ...] to store information about design's interface.
  * Added ['unit', ...]  to store user driven SI units specificaiton (temp,voltage, etc)
  * Renamed ['eda', ...] to ['tool', ...]
  * Renamed ['mcmm', ...] to ['constraint', ...]
  * Replaced ['source'], ['constraint'], and ['read', ...] with more flexible ['input', \<filetype\>] to supply input files.
  * Added support for storing multiple PDKs in schema and selecting which one to use for run (analagous to flows).
  * Change ['flowgraph'] to support modular flow composition
  * Added support for package management ['depgrah'].
  * Added checklist support.
  * Removed special ['library', ...] keypaths. All libraries are now created as Chip objects, and have their full config imported into a parent chip's schema.
* Added 'sup' packaging utility
* Added ability to configure stdout and stderr redirection on a per-tool basis (thanks to @suppamax for implementing).
* Added flexible tool version checking based on PEP-440 standard, now enabled by default.
* Added 'clean' feature for cleaning up intermediate tool outputs.
* Added 'resume' feature for restarting failed flows (for debugging).
* Added automatic capture of peak memory usage (adds dependency on `psutil <https://psutil.readthedocs.io/en/latest/>`_).
* Changed ['design'] to be a required parameter for instantiating a Chip.
* Changed error behavior to consistently raise exceptions rather than exit.
* Removed tool script copy feature, so now all EDA scripts are run from the reference directory.

**Minor:**

* Schema: Added ability to store per-parameter designer notes.
* Added offline wheels distribution.
* Added ``read_lef()`` function to help with PDK bring-up.
* Added environment variables to replay scripts.
* Added LVS/DRC signoff flow and top-level GDS stream out flow.
* Added native support for Sky130 I/O library, along with Heartbeat + padring example.
* Changed internals to minimize SC performance overhead with large flowgraphs.
* Changed task runtime tracking to distinguish between time spent in tool and total time.
* Fixed breakpoints to work more consistently across tools.

Note: Since there was no public release of version 0.8.0, this list summarizes all changes since 0.7.0.

SiliconCompiler 0.7.0 (2022-03-02)
=========================================

**Major:**

* Schema: Added ability to specify environment variables on a per-tool, per-task basis.
* Schema: Added per-tool 'techmap' parameter to library schema.
* Added browser-viewable report generation to core.summary().

**Minor:**

* Schema: Added filetypes to library schema: 'def', 'gerber', 'netlist', 'model' category.
* Schema: Added 'stackup' key to library lef/gds parameters.
* Schema: Changed 'pdk' and 'stackup' library parameters to lists.
* Schema: Added 'dir' passthrough to library schema.
* Schema: Added 'nodisplay' option to schema to better support headless jobs.
* Schema: Added 'licensefile' to package parameters to support non-standard licenses.
* Schema: Added 'gerber' to read schema.
* Schema: Added several cell categories to library schema.
* Changed how PDK-specific Yosys and OpenROAD parameters are driven to avoid hardcoding process info in tool drivers.
* Fixed step ordering bug in core.summary().
* Fixed bug with how 'arg', 'index' is handled.
* Fixed small bugs in automatic documentation generation.
* Added core.check_filepaths() helper.

SiliconCompiler 0.6.0 (2022-02-11)
=========================================

**Major:**

* Schema: Added 'flow' key to flowgraph to enable multi-flow targets.
* Schema: Added 'flow' parameter to enable selection between flows in flowgraph.
* Schema: Changed '_' separated tuple target to a single 'module' load target.
* Schema: Added 'regex' for grep like functionality.
* Schema: Changed metal grid to use PDK metal name as the major key.
* Schema: Added 'tool' key to PDK settings to avoid tool file conflicts.
* Schema: Added 'units' parameter to enable tech agnostic SDC.
* Schema: Added ability to specify tricky apr setup files on a per tool basis (tracks, taps, vias, antenna, etc).
* Schema: Added checklist functionality
* Added core.grep function
* Added core.check_logfile function to core API to emulate grep behavior
* Added core.load_{target, flow, lib, pdk} functions to core API in place of target()
* Added asap7 target
* Added docker support for basic RTL2GDS tool chain
* Removed core.target() function

**Minor:**

* Schema: Changed lib 'driver' to move into cells (consistency)
* Schema: Added site symmetry to avoid full lef parser.
* Schema: Changed tool version switch to a list
* Schema: Changed 'asic', 'targetlib' to 'asic', 'logiclib' for clarity.
* Schema: Changed 'eda, 'report' parameter guideline to always use 'metric' as keyword
* Schema: Added -skip_check option to speed up new target bringup
* Schema: Added -skip_step option to enable skipping specific steps
* Schema: Added 'pdk', ['file', 'directory', 'variable'] parameters to enable tool-specific PDK setups.
* Schema: Changed cell types to be hardcoded (tapcell, buf, clkbuf, etc) to avoid fragmentation.

SiliconCompiler 0.4.1 (2022-01-06)
===================================

**Minor:**

* Fix bug in Yosys parameter requirements spec that made check_manifest() too scrict

SiliconCompiler 0.4.0 (2022-01-05)
===================================

**Major:**

* Schema: Add 'tool' key to PDK fields
* Schema: Remove unneeded 'record' keys
* Implement automatic record-keeping
* Implement checks that flow make sense in terms of file I/O and that required files resolve
* Allow importing multiple files with the same basename

**Minor:**

* Automatically configure KLayout path on macOS
* Allow importing multiple files with the same basename
* Implement -I CLI switch for include directory


SiliconCompiler 0.3.1 (2021-12-21)
===================================

**Minor:**

* Fix sc-show on Windows.

SiliconCompiler 0.3.0 (2021-12-21)
===================================

**Major:**

* Schema: add 'read' section.
* Schema: Add alternate frontend support.

**Minor:**

* Fix old version of Surelog bundled with wheels


SiliconCompiler 0.1.1 (2021-12-08)
===================================

**Minor:**

* Fix: Prevent sc-show crash when PDK files are not found.
* Fix: Ensure sc-show can find KLayout executable on Windows

SiliconCompiler 0.1.0 (2021-12-03)
===================================

**Major:**

* First public release!!!
