name: Wheels

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Get Surelog version
      id: get-surelog
      run: |
        echo "version=$(python3 setup/_tools.py --tool surelog --field git-commit)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      id: surelog-cache
      if: matrix.os != 'ubuntu-latest'
      with:
        path: |
          siliconcompiler/tools/surelog/bin/surelog*
          siliconcompiler/tools/surelog/lib/surelog/sv/builtin.sv
        key: ${{ matrix.os }}-${{ steps.get-surelog.outputs.version }}

    # Needed for Surelog
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 11
        java-package: jre
        architecture: x64
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
        architecture: x64

    - name: Setup env (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y graphviz winflexbison3
        vcpkg install zlib zlib:x64-windows
        .github/workflows/bin/install_klayout_win.bat

    - name: Setup env (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install graphviz
        brew install bison
        # https://github.com/The-OpenROAD-Project/OpenROAD/issues/1688
        echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
        brew install flex
        echo "/usr/local/opt/flex/bin" >> $GITHUB_PATH
        brew install --cask klayout
        # https://github.com/ponty/PyVirtualDisplay/blob/master/.github/workflows/main.yml#L45
        brew install --cask xquartz
        echo "/opt/X11/bin" >> $GITHUB_PATH
        mkdir -p /tmp/.X11-unix
        sudo chmod 1777 /tmp/.X11-unix
        sudo chown root /tmp/.X11-unix

    - name: Build Surelog (Windows)
      if: matrix.os == 'windows-latest' && steps.surelog-cache.outputs.cache-hit != 'true'
      run: .github/workflows/bin/install_surelog_win.bat

    - name: Build Surelog (macOS)
      if: matrix.os == 'macos-latest' && steps.surelog-cache.outputs.cache-hit != 'true'
      run: .github/workflows/bin/install_surelog_macos.sh

    - uses: pypa/cibuildwheel@v2.9.0
      env:
        CIBW_BEFORE_ALL_LINUX: >
          export PREFIX={package}/siliconcompiler/tools/surelog &&
          {package}/.github/workflows/bin/setup_wheel_env_linux.sh
        CIBW_BEFORE_BUILD_WINDOWS: if exist "_skbuild\" rd /q /s  "_skbuild"
        CIBW_ENVIRONMENT_MACOS: >
          LDFLAGS="-L/usr/local/opt/bison/lib -L/usr/local/opt/flex/lib"
          CPPFLAGS="-I/usr/local/opt/flex/include"
        CIBW_ENVIRONMENT_WINDOWS: SC_CMAKEARGS="-DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake."
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_SKIP: "pp* *win32 *i686 *-musllinux_* *cp36*win*"
        MACOSX_DEPLOYMENT_TARGET: "10.15"
        CIBW_ARCHS_MACOS: x86_64 arm64
        CIBW_TEST_SKIP: "*_arm64"
        CIBW_TEST_EXTRAS: test
        CIBW_TEST_COMMAND: >
          pytest --import-mode=append {package}/tests/ -m "not eda" &&
          pytest --import-mode=append {package}/tests/tools/test_surelog.py &&
          pytest --import-mode=append {package}/tests/flows/test_show.py -k "not openroad"

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        path: wheelhouse/*.whl

  publish:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published' && !contains(github.event.release.body, 'NOPUBLISH')

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.4.2
      with:
        user: __token__
        password: ${{ secrets.PYPI_DEPLOY }}

  package_offline:
    # We want to run this on the official PEP Python-wheel building platform to
    # ensure the downloaded wheels have the broadest compatibility. Using the
    # '--platform' tag for 'pip download' doesn't work for us, since it requires
    # setting --only-binary=:all: and some of our deps aren't available as
    # wheels on some platforms.
    container: quay.io/pypa/manylinux2014_x86_64
    needs: [build_wheels]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39, cp310-cp310, cp311-cp311]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist

    - name: Package SC
      run: |
        mkdir scdeps
        $python -m pip download pip -d scdeps
        $python -m pip download ./dist/siliconcompiler*${{matrix.python}}*linux*.whl -d scdeps
        tar -czvf scdeps-${{matrix.python}}.tar.gz scdeps
      env:
        python: /opt/python/${{matrix.python}}/bin/python

    - name: Upload package
      uses: actions/upload-artifact@v3
      with:
        path: scdeps*.tar.gz
